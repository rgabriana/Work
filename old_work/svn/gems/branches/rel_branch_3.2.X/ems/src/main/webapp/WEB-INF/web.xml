<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

    
	<!-- Spring bootup listener. Make sure that this listener is always before EmsStartupShutdownListener
	     as EmsStartupShutdownListener depend on the Spring context being initialized properly -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>		
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:META-INF/spring/application*.xml</param-value>
	</context-param>
	
	<!-- Listener to do startup and cleanup for Ems -->
    <listener>
        <listener-class>com.ems.http.EmsStartupShutdownListener</listener-class>
    </listener>
	
	<listener>
	    <listener-class>
	        org.springframework.web.context.request.RequestContextListener
	    </listener-class>
	</listener>
	
	
	<!-- Session expiry filter for services -->
	<filter>
		  <filter-name>ExpiredSessionFilter</filter-name>
		  <filter-class>com.ems.filter.ExpiredSessionFilter</filter-class>
   </filter>
   <filter-mapping>
		   <filter-name>ExpiredSessionFilter</filter-name>
		   <url-pattern>/services/*</url-pattern>
		   <url-pattern>/ws/*</url-pattern>
   </filter-mapping>
  
   	<!-- UEM rest api filter -->
	<filter>
		<filter-name>UemRequestValidationFilter</filter-name>
		<filter-class>com.ems.filter.UemRequestValidationFilter</filter-class>
		
	</filter>
	<filter-mapping>
		<filter-name>UemRequestValidationFilter</filter-name>
		 <url-pattern>/api/*</url-pattern>
	</filter-mapping>
	
	<!-- Filter for Spring security framework. Spring security will trap all 
		calls to server coming via Http -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- Dashboard filter for allowing GEMS master server for SSO -->
	<filter>
		<filter-name>DashboardFilter</filter-name>
		<filter-class>com.ems.filter.DashboardAuthFilter</filter-class>
		<init-param>
			<param-name>token</param-name>
			<param-value>enLighted</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>DashboardFilter</filter-name>
		<url-pattern>/ems_dashboard</url-pattern>
	</filter-mapping>
	
	<!-- External facing rest api filter -->
	<filter>
		<filter-name>ExternalRestApiValidationFilter</filter-name>
		<filter-class>com.ems.filter.ExternalRestApiValidationFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>ExternalRestApiValidationFilter</filter-name>
		<url-pattern>/ws/*</url-pattern>
		<url-pattern>/restdocs/*</url-pattern>
		
	</filter-mapping>

	
    <!-- Compressing Filter -->
    <filter>
         <filter-name>compressingFilter</filter-name>
         <filter-class>com.ems.filter.CompressingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>compressingFilter</filter-name>
         <url-pattern>/services/*</url-pattern>
         <url-pattern>/api/*</url-pattern>
         <url-pattern>/ws/*</url-pattern>
    </filter-mapping>
    
	<!-- Caching filter. This will put requried Http headers for caching -->
	<filter>
		<filter-name>staticContentCachingFilter</filter-name>
		<filter-class>com.ems.filter.StaticContentCachingFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>staticContentCachingFilter</filter-name>
		<url-pattern>/modules/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>staticContentCachingFilter</filter-name>
		<url-pattern>/themes/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>staticContentCachingFilter</filter-name>
		<url-pattern>/scripts/*</url-pattern>
	</filter-mapping>

	<!-- Hibernate Filter to make the session lifecycle to be active for the 
		whole life of a Http Requst. This will avoid lazy initialization excepion. -->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>
			org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>*.ems</url-pattern>
	</filter-mapping>
	<filter-mapping>
        <filter-name>hibernateFilter</filter-name>
        <url-pattern>/services/*</url-pattern>
        <url-pattern>/api/*</url-pattern>
    </filter-mapping>

	<!-- Firmware upgrade servlet -->
	<servlet>
		<servlet-name>FirmwareUpgradeDownloadServlet</servlet-name>
		<servlet-class>com.ems.utils.FirmwareUpgradeDownloadServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>FirmwareUpgradeDownloadServlet</servlet-name>
		<url-pattern>/downloadFirmwareUpgrade</url-pattern>
	</servlet-mapping>

	<!-- Jersey servlet for web services -->
	<servlet>
		<servlet-name>GEMSWS</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>com.ems</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>GEMSWS</servlet-name>
		<url-pattern>/services/*</url-pattern>
        <url-pattern>/api/*</url-pattern>
		<url-pattern>/ws/*</url-pattern>
	</servlet-mapping>
	<!-- Spring MVC servlet to process UI based Http requests -->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>*.ems</url-pattern>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>

	<!-- Startup servlet - Should always be the last one to start in the chain -->
	<servlet>
		<servlet-name>emsStartup</servlet-name>
		<servlet-class>com.ems.http.EmsStartup</servlet-class>
		<load-on-startup>100</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>emsStartup</servlet-name>
		<url-pattern>/emsStartup</url-pattern>
	</servlet-mapping>

	<!-- Session will time out in 60 minutes of inactivity -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>

	<welcome-file-list>
		<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>
</web-app>