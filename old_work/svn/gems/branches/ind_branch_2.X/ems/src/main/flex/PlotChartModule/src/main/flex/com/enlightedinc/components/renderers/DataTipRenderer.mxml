<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="updateData()"
		 styleName="dataTipRenderer">
	
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter" formatString="YYYY-MM-DD JJ:NN:SS"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.enlightedinc.assets.images.Images;
			import com.enlightedinc.components.Constants;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			private var lightLevel:Number;
			private var ambientLevel:Number;
			private var lastOccupancy:Number;
			private var temperature:Number;
			
			[Bindable]
			public var obj:Object;
			
			[Bindable]
			private var showFixtureData:Boolean = false;
			[Bindable]
			private var showGatewayData:Boolean = false;
			[Bindable]
			private var showSwitchData:Boolean = false;
			[Bindable]
			private var showLocatorDeviceData:Boolean = false;
			[Bindable]
			private var showHVACData:Boolean = false;
			[Bindable]
			private var showOnlyName:Boolean = false;
			[Bindable]
			public var connectivityDelay:Boolean = false;
			[Bindable]
			public var hvacTempVal:int = 0;
			//public var hvacOff:Boolean = true;
			public function updateData() : void
			{
				showOnlyName = (FlexGlobals.topLevelApplication.m_propertyMode != Constants.FLOORPLAN);
				if(showOnlyName)
				{
					if(FlexGlobals.topLevelApplication.m_propertyMode ==Constants.IMAGE_UPGRADE && obj.imageUpgradeHoverStatus)
					{
						commissionName.text = obj.imageUpgradeHoverStatus;
					}
					else
					{
						commissionName.text = obj.name;
					}
					return;
				}
				
				if(connectivityDelay)
				{
					var serverDate:Date = createDate(obj.lastconnectivityat);
					sensorName.text = obj.name;
					connectivityImage.source = Images.NoConnectivity;
					connectivityText.text = dateFormatter.format(serverDate);
					return;
				}
				
				if(obj.type == Constants.FIXTURE)
				{
					showFixtureData = true;
					
					sensorDetails.text = obj.name + "  -  " + obj.currentprofile;
					
					if(obj.currentstate != null)
					{
						sensorDetails.text += "  -  ";
						sensorDetails.text += obj.currentstate;
					}
					
					lightLevel = obj.lightlevel;
					ambientLevel = obj.ambientlight;
					lastOccupancy = obj.lastoccupancyseen;
					temperature = obj.avgtemperature;
					
					// Light Level Icon
					if(lightLevel == 0)
					{
						lightLevelImage.source = Images.LightOff;
					}
					else if(lightLevel > 0 && lightLevel < 25)
					{
						lightLevelImage.source = Images.Light10On;
					}
					else if(lightLevel >= 25 && lightLevel < 50)
					{
						lightLevelImage.source = Images.Light25On;
					}
					else if(lightLevel >= 50 && lightLevel < 75)
					{
						lightLevelImage.source = Images.Light50On;
					}
					else if(lightLevel >= 75 && lightLevel < 100)
					{
						lightLevelImage.source = Images.Light75On;
					}
					else if(lightLevel == 100)
					{
						lightLevelImage.source = Images.LightFullOn;
					}
					
					// Ambient Light icon
					if(ambientLevel < 10)
					{
						ambientImage.source = Images.AmbientDark;
					}
					else if(ambientLevel >= 10 && ambientLevel < 30)
					{
						ambientImage.source = Images.AmbientDim;
					}
					else if(ambientLevel >= 30 && ambientLevel < 65)
					{
						ambientImage.source = Images.AmbientNormal;
					}
					else if(ambientLevel >= 65)
					{
						ambientImage.source = Images.AmbientBright;
					}
					
					//Ocuupany Icon
					if(lastOccupancy <= 30)
					{
						occupancyImage.source = Images.OccupancyOccupied;
					}
					else if(lastOccupancy > 30 &&  lastOccupancy< 300)
					{
						occupancyImage.source = Images.OccupancyJustVacated; 
					}
					else
					{
						occupancyImage.source = Images.OccupancyVacated;
					}
					
					//Temperature Icon
					if(temperature > 82)
					{
						temperatureImage.source = Images.TemperatureHot;
					}
					else if(temperature > 75 && temperature <= 82)
					{
						temperatureImage.source = Images.TemperatureWarm;
					}
					else if(temperature > 68 && temperature <= 75)
					{
						temperatureImage.source = Images.TemperatureNormal;
					}
					else if(temperature > 65 && temperature <= 68)
					{
						temperatureImage.source = Images.TemperatureCool;
					}
					else if(temperature <= 65)
					{
						temperatureImage.source = Images.TemperatureCold;
					}
					
					lightLevelText.text = getDimmerControlString(obj.lightlevel);
					wattageText.text = wattPrecision(Number(obj.wattage), obj.lightlevel);
					ambientText.text = getLightLevelString(obj.ambientlight);
					//ambientValue.text = getLightLevelValue(obj.ambientlight);
					occupancyText.text = getOccupancyString(obj.lastoccupancyseen);
					temperatureText.text = getTemperatureString(obj.avgtemperature);
					temperatureValue.htmlText = getTemperatureValue(obj.avgtemperature); 
				} 
				else if(obj.type == Constants.GATEWAY)
				{
					showGatewayData = true;
					gatewayName.text = obj.name;
					if(FlexGlobals.topLevelApplication.m_propertyMode == Constants.FLOORPLAN)
					{
						gatewayFixtureCount.text = "Bound Fixtures: " + obj.noofactivesensors;
						gatewayFixtureCount.visible = true;
						gatewayFixtureCount.includeInLayout = true;
					}  
					
				}  
				else if(obj.type == Constants.SWITCH || obj.type == Constants.WDS)
				{
					showSwitchData = true;
					switchName.text = obj.name;
				}
				else if(obj.type == Constants.LOCATORDEVICE)
				{
					showLocatorDeviceData= true;
					locatorDeviceName.text = obj.name;
					var locatorDeviceTypeStr:String = obj.locatorDeviceType;
					var reg:RegExp = /_/g;
					locatorDeviceType.text = locatorDeviceTypeStr.replace(reg, " ");
				}
				else if(obj.type == Constants.HVAC)
				{
					showHVACData = true;
					hvacName.text = obj.name;
					if(FlexGlobals.topLevelApplication.m_propertyMode == Constants.FLOORPLAN)
					{
						//Convert Temperature to Celcious before displaying on UI
						// Fahrenheit - Celcious
						//Tc = (5/9)*(Tf-32)
						//Celcious - Fahrenheit 
						//Tf = ((9/5)*Tc)+32
						/* 
						if (hvacTempVal==-1)
						{
						hvacOff =false;
						}
						*/
						if(hvacTempVal > 0)
						{
							hvacTemp.htmlText = " Temperature: " + hvacTempVal.toString()+  " &#186;C";
							hvacTemp.visible = true;
							hvacTemp.includeInLayout = true;
						}/*
						else if(hvacTempVal==-1 && hvacOff==false)
						{
						hvacTemp.htmlText = " OFF";
						hvacTemp.visible = true;
						hvacTemp.includeInLayout = true;
						}
						*/
					}
				}
			}
			
			public function setBackgroundColor(color:String) : void
			{
				this.setStyle("backgroundColor", color);
				showFixtureData = false;
				showGatewayData = false;
				showSwitchData = false;
				showLocatorDeviceData = false;
				showOnlyName = false;
				connectivityDelay = false;
			}
			
			private function createDate(str:String) : Date
			{
				var date:Date = new Date();
				date.setFullYear(str.slice(0,4));
				date.setMonth(str.slice(5,7));
				date.setMonth(date.getMonth() - 1);
				date.setDate(str.slice(8,10));
				date.setHours(str.slice(11,13));
				date.setMinutes(str.slice(14,16));
				date.setSeconds(str.slice(17,19));
				return date;
			}
			
			private function getDimmerControlString(value:int):String
			{
				if(value == 0)
					return "Off";
				else if(value == 100)
					return "Full On";
				else
					return value + "% ON";
			}
			
			private function wattPrecision(value:Number, lightLevel:Number) : String
			{
				if(lightLevel == 0)
					return "0 W";
				if(!value)
					return "-";
				else if (value >= 1000000)
					return (value/1000000).toFixed(2) +" MW";
				else if (value >= 1000)
					return (value/1000).toFixed(2) +" kW";
				else
					return value.toFixed(2) + " W";
			}
			
			private function getLightLevelString(iLightLevel:Number):String
			{
				if(iLightLevel > 65)
					return "Bright";
				else if(iLightLevel > 30)
					return "Normal";
				else if(iLightLevel > 10)
					return "Dim";
				else
					return "Dark";
			}
			
			/* private function getLightLevelValue(iLightLevel:Number):String
			{
			return iLightLevel + " f.c.";
			} */
			
			private function getOccupancyString(strOccValue:Number):String
			{
				var date:Date = new Date(0, 0, 0, 0, 0, strOccValue, 0);
				if(date.getDay() > 0)
				{
					if(date.getHours() > 0)
						return date.getDay().toString() + " days, " + date.getHours().toString() + " hrs ago";
					else
						return "Occupied:" + date.getDay().toString() + " days ago";
				}
				else if(date.getHours() > 0)
				{
					if(date.getMinutes() > 0)
						return date.getHours().toString() + " hrs, " + date.getMinutes().toString() + " min ago";
					else
						return date.getHours().toString() + " hrs ago";
				}
				else if(date.getMinutes() > 0)
				{
					if(date.getSeconds() > 0)
						return date.getMinutes().toString() + " min, " + date.getSeconds().toString() + " sec ago";
					else
						return date.getMinutes().toString() + " min ago";
				}
				else
					return date.getSeconds().toString() + " sec ago";
			}
			
			private function getTemperatureString(num:Number):String
			{
				if(num > 82)
					return "Hot";
				else if(num > 75)
					return "Warm";
				else if(num > 68)
					return "Normal";
				else if(num > 65)
					return "Cool";
				else if(num > 0)
					return "Cold";
				else
					return "N/A";
			}
			
			private function getTemperatureValue(num:Number):String
			{
				//Convert the  Fahrenheit - Celcious ( //Tc = (5/9)*(Tf-32) )
				var temperature:Number= Math.round((5/9)*(num-32));
				return temperature + " &#186;C";
			}
		]]>
	</fx:Script>
	
	<mx:VBox visible="{showFixtureData}" includeInLayout="{showFixtureData}"
			 horizontalAlign="center">
		<mx:HBox id="fixtureRenderer"
				 styleName="fixtureTooltipRenderer">
			<mx:VBox styleName="toolTipRendererBox">
				<mx:Image id="lightLevelImage" width="16" height="16"/>
				<s:Label id="lightLevelText"/>
				<s:Label id="wattageText"/>
			</mx:VBox>
			<mx:VRule height="80"/>
			<mx:VBox styleName="toolTipRendererBox">
				<mx:Image id="ambientImage" width="16" height="16"/>
				<s:Label id="ambientText"/>
				<s:Label id="ambientValue"/>
			</mx:VBox>
			<mx:VRule height="80"/>
			<mx:VBox styleName="toolTipRendererBox">
				<mx:Image id="occupancyImage" width="16" height="16"/>
				<s:Label text="Occupied"/>
				<s:Label id="occupancyText"/>
			</mx:VBox>
			<mx:VRule height="80"/>
			<mx:VBox styleName="toolTipRendererBox">
				<mx:Image id="temperatureImage" width="16" height="16"/>
				<s:Label id="temperatureText"/>
				<mx:Text id="temperatureValue"/>
			</mx:VBox>
		</mx:HBox>
		
		<s:Label id="sensorDetails"/>
	</mx:VBox>
	
	<mx:VBox id="connectivityRenderer" 
			 backgroundAlpha="0"
			 visible="{connectivityDelay}" includeInLayout="{connectivityDelay}"
			 styleName="toolTipRenderer">
		<s:Label id="sensorName"/>
		<mx:Image id="connectivityImage"/>
		<s:Label id="connectivityLabel" text="Last Connected"/>
		<s:Label id="connectivityText"/>
	</mx:VBox>
	
	<mx:VBox id="gatewayRenderer"
			 visible="{showGatewayData}" includeInLayout="{showGatewayData}"
			 styleName="toolTipRenderer">
		<s:Label id="gatewayName"/>
		<s:Label id="gatewayFixtureCount"
				 visible="false" includeInLayout="false"/>
	</mx:VBox>
	
	<mx:HBox id="switchRenderer"
			 visible="{showSwitchData}" includeInLayout="{showSwitchData}"
			 styleName="toolTipRenderer">
		<s:Label id="switchName"/>
	</mx:HBox>
	
	<mx:VBox id="locatorDeviceRenderer"
			 visible="{showLocatorDeviceData}" includeInLayout="{showLocatorDeviceData}"
			 styleName="toolTipRenderer">
		<s:Label id="locatorDeviceName"/>
		<s:Label id="locatorDeviceType"/>
	</mx:VBox>
	
	<mx:HBox id="hvacRenderer"
			 visible="{showHVACData}" includeInLayout="{showHVACData}"
			 styleName="toolTipRenderer">
		<s:Label id="hvacName"/>
		<mx:Text id="hvacTemp" visible="false" includeInLayout="false"/>
	</mx:HBox>
	
	<mx:HBox id="commissionRenderer"
			 visible="{showOnlyName}" includeInLayout="{showOnlyName}"
			 styleName="toolTipRenderer">
		<s:Label id="commissionName"/>
	</mx:HBox>
	
</mx:VBox>
