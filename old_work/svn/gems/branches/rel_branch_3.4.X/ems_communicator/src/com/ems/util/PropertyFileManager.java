package com.ems.util;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.TimeZone;

import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.apache.log4j.PropertyConfigurator;

import com.ems.Globals;



/**
 * @author SAMEER SURJIKAR This Class load the urls.property file and replace
 *         the place holders with there appropriate values and write them back
 *         the same file. The object of this class should be created and
 *         setUrls() function should be called so that the urls are properly set
 *         for other classes to use.
 * 
 */
public class PropertyFileManager {
	private String propFilePath;
	private Properties properties;
	private Logger log = Globals.log;
	private String gemsLoginUrl = "https://localhost:{GemsPort}/ems/wsaction.action";
	private String macGenerationIp = "{GemsIp}";
	private String getHourlyDashBoardDetailsData = "https://localhost:{GemsPort}/ems/services/org/ec/mds/company/1/hour";
	private String serverLoginUrl = "https://{MasterGemsIp}:{MasterGemsPort}/ems_dashboard/wsaction.action";
	private String sendHourlyDashBoardDetailsData = "https://{MasterGemsIp}:{MasterGemsPort}/ems_dashboard/services/org/ec/load/{GemsIp}";

	public PropertyFileManager() {
		propFilePath = Globals.propFile;
		properties = new Properties();
	}

	/**
	 * Uses property file entries to generate urls for communicator to get and
	 * post data.
	 */
	public void setUrls() {
		try {
			loadLoggingPropertyFile();
		} catch (SecurityException e1) {
		} catch (IOException e1) {
		}
		try {

			InputStream is = new FileInputStream(propFilePath);
			properties.load(is);
			// Properties that will be generated by ems and kept in a property
			// file.
			String gemsIP = properties.getProperty("GemsIp");
			String masterGemsIP = properties.getProperty("MasterGemsIp");
			String gemsPort = properties.getProperty("GemsPort");
			String masterGemsPort = properties.getProperty("MasterGemsPort");
			String timeZone = TimeZone.getDefault().getDisplayName(false, TimeZone.SHORT);
			properties.put("macGenerationIp",
					macGenerationIp.replace("{GemsIp}", gemsIP));
			properties.put("GemsLoginUrl",
					gemsLoginUrl.replace("{GemsPort}", gemsPort));

			serverLoginUrl = serverLoginUrl.replace("{MasterGemsIp}",
					masterGemsIP);
			serverLoginUrl = serverLoginUrl.replace("{MasterGemsPort}",
					masterGemsPort);
			properties.put("ServerLoginUrl", serverLoginUrl);

			sendHourlyDashBoardDetailsData = sendHourlyDashBoardDetailsData
					.replace("{MasterGemsIp}", masterGemsIP);
			sendHourlyDashBoardDetailsData = sendHourlyDashBoardDetailsData
					.replace("{MasterGemsPort}", masterGemsPort);
			sendHourlyDashBoardDetailsData = sendHourlyDashBoardDetailsData
					.replace("{GemsIp}", gemsIP);
			properties.put("SendHourlyDashBoardDetailsData",
					sendHourlyDashBoardDetailsData);
			properties.put("TimeZone", timeZone ) ;
			properties.put("GetHourlyDashBoardDetailsData",
					getHourlyDashBoardDetailsData.replace("{GemsPort}",
							gemsPort));
			properties.store(new FileOutputStream(propFilePath), null);

		} catch (IOException ex) {
			log.info("Error while reading/writing property file "
					+ Globals.propFile);
		} catch (Exception e) {
			log.info("Error with reading/writing  property file "
					+ Globals.propFile);
		}

	}

	public void loadLoggingPropertyFile() throws SecurityException, IOException {

		try {
			FileInputStream fis = new FileInputStream("log4j.properties");
			PropertyConfigurator.configureAndWatch("log4j.properties", 10000);
		} catch(Exception e) {
			
			Globals.log.setLevel(Level.INFO);
			 FileAppender fa = new FileAppender();
			 fa.setName("FileLogger");
			  fa.setFile("communicator%g.log");
			  fa.setLayout(new PatternLayout("%d %-5p [%c{1}] %m%n"));
			  fa.setThreshold(Level.INFO);
			  fa.setAppend(true);
			  fa.activateOptions();
			  Globals.log.addAppender( fa) ;

			log.info("Error while reading/writing  logging property file loading default logging values");
		}

	}

}
