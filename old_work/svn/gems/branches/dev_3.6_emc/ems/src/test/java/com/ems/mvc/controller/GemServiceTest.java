/** 
 * This file has been auto-generated by REST Compile. 
 * 
 * You should not modify it, unless you know what you do. Any modification 
 * might cause serious damage, or even destroy your computer. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE. 
 */

package com.ems.mvc.controller;

/**
 * This class has been auto-generated by REST Compile.
 *
 * @author REST Compile 
 */

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.SecureRandom;
import java.security.Security;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.security.cert.CertificateException;
import javax.security.cert.X509Certificate;

import org.junit.Ignore;

@Ignore
public class GemServiceTest extends RestRequest {

    // class variables
    private String j_username; // optional
    private String j_password; // optional
    static {
        try {
            validateSelfSignedHttpsCertificates();
        } catch (Exception e) {
        }
    }

    /**
     * constructor with 0 argument(s)
     * 
     */
    public GemServiceTest() {

        // empty constructor

    }

    /**
     * constructor with 1 argument(s)
     * 
     * @param j_username
     */
    public GemServiceTest(String j_username) {

        // assign class variables
        this.j_username = j_username;

    }

    /**
     * constructor with 2 argument(s)
     * 
     * @param j_username
     * @param j_password
     */
    public GemServiceTest(String j_username, String j_password) {

        // assign class variables
        this.j_username = j_username;
        this.j_password = j_password;

    }

    /**
     * @return the String representation of the j_username
     */
    public String getJ_username() {
        if ((j_username + "").equals("null"))
            return "";
        return ((Object) j_username).toString();
    }

    /**
     * @param j_username
     *            the j_username to set
     * @return the instance of the class (this)
     */
    public GemServiceTest setJ_username(String j_username) {
        this.j_username = j_username;
        return this;
    }

    /**
     * @return the String representation of the j_password
     */
    public String getJ_password() {
        if ((j_password + "").equals("null"))
            return "";
        return ((Object) j_password).toString();
    }

    /**
     * @param j_password
     *            the j_password to set
     * @return the instance of the class (this)
     */
    public GemServiceTest setJ_password(String j_password) {
        this.j_password = j_password;
        return this;
    }

    // prepares the POST or GET parameters
    private String prepareParams() {
        String paramString = "";

        try {

            // optional parameters
            paramString += (!this.getJ_username().equals("")) ? "&j_username="
                    + URLEncoder.encode(this.getJ_username(), "UTF-8") : "";
            paramString += (!this.getJ_password().equals("")) ? "&j_password="
                    + URLEncoder.encode(this.getJ_password(), "UTF-8") : "";
        } catch (UnsupportedEncodingException e) {
            System.err.println(e.toString());
        }

        // strip off the first '&'
        if (paramString.length() > 0) {
            paramString = paramString.substring(1);
        }
        return paramString;

    }

    // submits the request
    public String submit() {

        String requestUri = "https://10.8.3.179/ecloud/j_spring_security_check";
        String response = this.doPostCall(requestUri, this.prepareParams(), "application/x-www-form-urlencoded");
        return response;
    }

    public static void main(String[] args) {
        GemServiceTest oTest = new GemServiceTest("admin", "admin");
        System.out.println(oTest.submit());
        //System.out.println(oTest.doGetCall("https://localhost:9443/ems/services/org/company"));
        System.out.println(oTest.doGetCall("https://10.8.3.179/ecloud/services/org/facility/getFacilityTreeXml/50"));
    }

    static public void validateSelfSignedHttpsCertificates() throws Exception {
        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());

        // Create a trust manager that does not validate certificate chains:
        TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                return;
            }

            public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                return;
            }

            public void checkClientTrusted(java.security.cert.X509Certificate[] arg0, String arg1)
                    throws java.security.cert.CertificateException {
                // TODO Auto-generated method stub

            }

            public void checkServerTrusted(java.security.cert.X509Certificate[] arg0, String arg1)
                    throws java.security.cert.CertificateException {
                // TODO Auto-generated method stub

            }
        } // X509TrustManager
        };// TrustManager[]
          // Install the all-trusting trust manager:
        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

        // avoid "HTTPS hostname wrong: should be <myhostname>" exception:
        HostnameVerifier hv = new HostnameVerifier() {
            public boolean verify(String urlHostName, SSLSession session) {
                if (!urlHostName.equalsIgnoreCase(session.getPeerHost())) {
                    System.out.println("URL host '" + urlHostName + "' => SSLSession host '" + session.getPeerHost()
                            + "'.");
                }
                return true; // also accept different hostname (e.g. domain name
                // instead of IP address)
            }

        };
        HttpsURLConnection.setDefaultHostnameVerifier(hv);
    }

}
