package com.ems.mvc.controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.zip.GZIPInputStream;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

import org.junit.Ignore;

/**
 * This class has been auto-generated by REST Compile.
 * 
 * @author REST Compile
 */
@Ignore
public class RestRequest {

    // provide user and password for HTTP AUTH
    private static final String user = "";
    private static final String password = "";
    private static String sessionId = "";

    /**
     * Class for placing a GET call
     * 
     * @param urlString
     *            the URL as a String value
     * @return the response of the call as a String
     */
    public static String doGetCall(String urlString) {
        String response = "";
        try {
            // connect to the web service via HTTP GET
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            if (!sessionId.isEmpty())
                connection.addRequestProperty("Cookie", sessionId);
            // provide credentials if they're established
            if (user.length() > 0 && password.length() > 0) {
                String userPassword = user + ":" + password;
                String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
                connection.setRequestProperty("Authorization", "Basic " + encoding);
            }
            connection.setRequestMethod("GET");
            connection.connect();
            System.out.println(connection.getHeaderField(0));            
            response = receiveResponse(connection);

            connection.disconnect();
        } catch (IOException e) {
            System.err.println(e.toString());
        }
        return response;
    }

    /**
     * Class for placing a POST call
     * 
     * @param urlString
     *            the URL as a String value
     * @param postArgs
     *            the POST arguments as a URL-encoded String
     * @return the response of the call as a String
     */
    public static String doPostCall(String urlString, String postArgs, String contentType) {
        String response = "";

        try {
            // connect to the web service via HTTP POST
            URL url = new URL(urlString);
            HttpURLConnection.setFollowRedirects(false);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            // provide credentials if they're established
            if (user.length() > 0 && password.length() > 0) {
                String userPassword = user + ":" + password;
                String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
                connection.setRequestProperty("Authorization", "Basic " + encoding);
            }
            if (!contentType.isEmpty()) {
                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            }
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            OutputStreamWriter outputStream = new OutputStreamWriter(connection.getOutputStream());
            outputStream.write(postArgs);
            outputStream.flush();

            System.out.println(connection.getHeaderField(0));

            String key = "";
            for (int i = 1; (key = connection.getHeaderFieldKey(i)) != null; i++) {
                // get ASP.NET_SessionId from cookie
                if (key.equalsIgnoreCase("set-cookie")) {
                    sessionId = connection.getHeaderField(key);
                    sessionId = sessionId.substring(0, sessionId.indexOf(";"));
                    System.out.println(key + ": " + sessionId);
                }
            }

            response = receiveResponse(connection);

            connection.disconnect();
            outputStream.close();
        } catch (IOException e) {
            System.err.println(e.toString());
        }
        return response;
    }

    /**
     * Internal method for encoding-type-based input stream creation. The goal
     * is to accept compressed data if possible.
     * 
     * @param connection
     *            the HTTP URL connection
     * @return the response as a String
     * @throws IOException
     */
    private static String receiveResponse(HttpURLConnection connection) throws IOException {
        StringBuffer response = new StringBuffer();
        try {
            // create the appropriate stream wrapper based on the encoding type
            InputStream inputStream = null;
            String contentEncoding = connection.getContentEncoding();
            if (contentEncoding != null) {
                if (contentEncoding.equalsIgnoreCase("gzip")) {
                    inputStream = new GZIPInputStream(connection.getInputStream());
                } else if (contentEncoding.equalsIgnoreCase("deflate")) {
                    inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true));
                }
            } else {
                inputStream = connection.getInputStream();
            }

            // read the contents
            byte[] buffer = new byte[1024];
            int length;            
            while ((length = inputStream.read(buffer)) > 0) {              
              response.append(new String(buffer, 0, length));
//                for (int i = 0; i < length; i++) {
//                    response += (char) buffer[i];
//                }
            }            
            inputStream.close();
        } catch (IOException e) {
            int responseCode = connection.getResponseCode();
            switch (responseCode) {
            }
        }
        return response.toString();
    }
}
