<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="30" maxHeight="30" paddingRight="5"
		 verticalAlign="middle" xmlns:components="com.enlightedinc.components.*">
	
	<fx:Metadata>
		[Event(type="com.enlightedinc.events.EnergySummaryFilterEvent", name="filterEnergySummary")]
		[Event(type="com.enlightedinc.events.EnergySummaryDockEvent", name="dockClick")]
		[Event(type="com.enlightedinc.events.EnergySummaryDockEvent", name="refreshScreen")]
		[Event(type="com.enlightedinc.events.EnergySummaryDockEvent", name="export")]
	</fx:Metadata>
	<fx:Declarations>
		<mx:DateValidator id="todateValidator" property="text" requiredFieldError="Please choose a date" />
		<mx:DateFormatter id="dateFormatter" formatString="YYYYMMDDJJNNSS"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.enlightedinc.assets.images.Images;
			import com.enlightedinc.common.CountsCalculator;
			import com.enlightedinc.events.EnergySummaryDockEvent;
			import com.enlightedinc.events.EnergySummaryFilterEvent;
			import com.enlightedinc.utils.GlobalUtils;
			
			import flash.text.engine.FontWeight;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.ValidationResultEvent;
			import mx.validators.ValidationResult;
			
			import org.alivepdf.colors.RGBColor;
			import org.alivepdf.data.Grid;
			import org.alivepdf.data.GridColumn;
			import org.alivepdf.display.Display;
			import org.alivepdf.drawing.Joint;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.fonts.Style;
			import org.alivepdf.images.ResizeMode;
			import org.alivepdf.layout.Align;
			import org.alivepdf.layout.Layout;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.layout.Size;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
			private var results:Array;
			// Define mismatch error messsage
			private var dateMismatchError : String = "From date should be smaller than To date?";
			
			private var currSelButton:Button;
			private var filterButton:Button;
			[Bindable]
			private var application:Object = FlexGlobals.topLevelApplication;
			private var _setSelectedButton:String;
			
			public function get setSelectedButton():String
			{
				return _setSelectedButton;
			}

			public function set setSelectedButton(value:String):void
			{
				if(application.isRefresh)
				{
					return;
				}
				_setSelectedButton = value;
				showButtonSelected(_setSelectedButton);
			}

			private function filterData(event:MouseEvent) : void
			{
				filterButton = event.currentTarget as Button;
				filterButton.emphasized =true;
				filterButton.setStyle('fontWeight', FontWeight.BOLD);
				filterButton.setStyle("accentColor",0x000000);
				
				//Reset Current Selected Period button
				if(currSelButton)
				{
					currSelButton.clearStyle('fontWeight');
					currSelButton.emphasized =false;
				}
				
				var nowDate:Date = GlobalUtils.getServerTime();
				
				if(validateEmptyDate())
				{
					var fDate:Date = DateField.stringToDate(fromDate.text, "MM/DD/YYYY");
					//fDate.setDate(fDate.getDate());
					///fDate.setHours(nowDate.getHours());
					//fDate.setMinutes(nowDate.getMinutes());
					//fDate.setSeconds(nowDate.getSeconds());
					
					var tDate:Date = DateField.stringToDate(toDate.text, "MM/DD/YYYY");
					//tDate.setHours(nowDate.getHours());
					//tDate.setMinutes(nowDate.getMinutes());
					//tDate.setSeconds(nowDate.getSeconds());
					
					dispatchEvent( new EnergySummaryFilterEvent( EnergySummaryFilterEvent.FILTER_ENERGY_SUMMARY, fDate, tDate) );
				}
			}
			
			public function refreshFilterSelectedData():void{
				var nowDate:Date = GlobalUtils.getServerTime();
				var fDate:Date = DateField.stringToDate(fromDate.text, "MM/DD/YYYY");
				fDate.setDate(fDate.getDate());
				fDate.setHours(nowDate.getHours());
				fDate.setMinutes(nowDate.getMinutes());
				fDate.setSeconds(nowDate.getSeconds());
				
				var tDate:Date = DateField.stringToDate(toDate.text, "MM/DD/YYYY");
				tDate.setHours(nowDate.getHours());
				tDate.setMinutes(nowDate.getMinutes());
				tDate.setSeconds(nowDate.getSeconds());
				dispatchEvent( new EnergySummaryFilterEvent( EnergySummaryFilterEvent.FILTER_ENERGY_SUMMARY, fDate, tDate) );
			}
			private function validateEmptyDate():Boolean
			{
				todateValidator.source= toDate;
				var flag:Boolean = true;
				var result:ValidationResultEvent = todateValidator.validate();
				if(result.results!=null && result.results.length>0)
					flag=false;
				return 	flag;			
			}
			private function onFromDateChange() : void
			{
				var secs:Number = 1000 * 60 * 60 * 24;
				var fdate:Date = DateField.stringToDate(fromDate.text, "MM/DD/YYYY");
				var tDateStr:String= toDate.text;
				var tDate:Date = DateField.stringToDate(tDateStr, "MM/DD/YYYY");
				
				fromDate.selectableRange = {rangeEnd : tDate};
				
				if(tDateStr!=null && tDateStr.length>0)
				{
					var result:Array = validateDateRange(fdate,tDate);
					
					if(result.length>0)
					{
						toDate.selectedDate = null;
					}else
					{
						//Keep the Original selected todate as it is
						toDate.selectedDate = DateField.stringToDate(tDateStr, "MM/DD/YYYYY");

					}
				}
			}
			private function onToDateOpenHandler():void{
				var fromDateStr:String= fromDate.text;
				var fDate:Date = DateField.stringToDate(fromDateStr, "MM/DD/YYYY");
				var nextDay:Date = GlobalUtils.getServerTime();
				var secs:Number = 1000 * 60 * 60 * 24;
				nextDay.setTime(fDate.getTime());
				toDate.selectableRange= {rangeStart : nextDay, rangeEnd : GlobalUtils.getServerTime()};
			}
			private function onFromDateOpenHandler():void
			{
				var tDateStr:String= toDate.text;
				var tDate:Date = DateField.stringToDate(tDateStr, "MM/DD/YYYY");
				fromDate.selectableRange = {rangeEnd : tDate};
				
			}
			private function validateDateRange(startDate:Date, endDate:Date):Array
			{
				results = [];
				todateValidator.source= toDate;
				var StartTimestamp : Number = startDate.getTime (); // create milisec vrom start date
				var EndTimestamp : Number = endDate.getTime ();    // create milisec vrom end date    	
				
				if (StartTimestamp == EndTimestamp){// start date same as end date = OKAY
					return results;
				} else if (StartTimestamp < EndTimestamp){ //end date bigger then start date = OKAY
					return results;
				} else { // error - From date should be smaller than To date?, 
					todateValidator.validate();
					todateValidator.requiredFieldError = dateMismatchError;
					results.push(new ValidationResult(true, null, "Date Error", dateMismatchError));
					return results;
				}
			}
			private function getData(event:MouseEvent) : void
			{
				showButtonSelected((event.currentTarget as Button).name);
				dispatchEvent( new EnergySummaryDockEvent( EnergySummaryDockEvent.CLICK_EVENT, event.target.name) );
			}
			
			private function refresh() : void
			{
				dispatchEvent( new EnergySummaryDockEvent(EnergySummaryDockEvent.REFRESH_SCREEN, ""));
			}
			private function showButtonSelected(buttonName:String):void
			{
				var selectedButton:Button;
				switch(buttonName)
				{
					case Constants.DAY :
						selectedButton = this.getChildByName(Constants.DAY) as Button;
						break;
					case Constants.WEEK: 
						selectedButton = this.getChildByName(Constants.WEEK) as Button;
						break;
					case Constants.MONTH:
						selectedButton = this.getChildByName(Constants.MONTH) as Button;
						break;
					case Constants.YEAR:
						selectedButton = this.getChildByName(Constants.YEAR) as Button;
						break;
				}
				//Reset Filter Button
				if(currSelButton)
				{
					currSelButton.clearStyle('fontWeight');
					currSelButton.emphasized =false;
				}
				//Reset Filter Button
				if(filterButton)
				{
					filterButton.clearStyle('fontWeight');
					filterButton.emphasized =false;
				}
				currSelButton= selectedButton;
				selectedButton.emphasized =true;
				selectedButton.setStyle('fontWeight', FontWeight.BOLD);
				selectedButton.setStyle("accentColor",0x000000);
			}    
			private function printData(e:MouseEvent):void{
				var printContainer:UIComponent = FlexGlobals.topLevelApplication.baseGroup;
				// Print the Energy Graph
				var printPDF:PDF = new PDF( Orientation.LANDSCAPE, Unit.MM, Size.A4 );
				printPDF.setDisplayMode( Display.FULL_PAGE, Layout.SINGLE_PAGE );
				printPDF.addPage();
				var page1Title :String = "Energy Consumption Graph";
				printPDF.setFont(FontFamily.ARIAL, Style.NORMAL, 11);
				printPDF.textStyle(new RGBColor (0x000000));
				
				
				printPDF.addText(page1Title,130,5);
				
				printPDF.getDefaultSize()
				
				var rectWidthPage1:Number = printContainer.width/3;
				var rectHeightPage1:Number = printContainer.height/3;
				printPDF.drawRect( new Rectangle(5,10,rectWidthPage1-80,rectHeightPage1-30));
				printPDF.addImage(printContainer, 10, 15, printContainer.width/3, printContainer.height/3, 'PNG', 100, 1, ResizeMode.FIT_TO_PAGE);
				
				var printGridArrayCollection:ArrayCollection = new ArrayCollection(GlobalUtils.clone(CountsCalculator.getInstance().chartDataCollection.source));
				
				var printDataArray:Array;
				if((printGridArrayCollection!=null) && (printGridArrayCollection.length>0))
				{
					printDataArray = formatPDFGridData (printGridArrayCollection);
				}
				
				// PRINT DATA GRID
				if(printDataArray!=null && printDataArray.length>0)
				{
					var gridColumns:Array = new Array();
					var gridColumnName:GridColumn = new GridColumn("Period", "captureon", 44, Align.CENTER, Align.CENTER);
					gridColumns.push(gridColumnName);
					var gridColumnEnergyUsed:GridColumn = new GridColumn(Constants.ENERGY_USED, "powerused", 44, Align.CENTER, Align.RIGHT);
					gridColumns.push(gridColumnEnergyUsed);
					var gridColumnTotalFixture:GridColumn = new GridColumn(Constants.OCCUPANCY_SAVING, "occsaving", 44, Align.CENTER, Align.RIGHT);
					gridColumns.push(gridColumnTotalFixture);
					var gridColumnCost:GridColumn = new GridColumn(Constants.DAYLIGHT_HARVESTING, "ambientsaving", 44, Align.CENTER, Align.RIGHT);
					gridColumns.push(gridColumnCost);
					var gridColumnSavedPower:GridColumn = new GridColumn(Constants.TASK_TUNEUP_SAVING, "tasktuneupsaving", 44, Align.CENTER, Align.RIGHT);
					gridColumns.push(gridColumnSavedPower);
					
					var gridColumnTotalSaving:GridColumn = new GridColumn("Total Saving", "totalsaving", 44, Align.CENTER, Align.RIGHT);
					gridColumns.push(gridColumnTotalSaving);
					
					printPDF.setDisplayMode( Display.REAL, Layout.SINGLE_PAGE );
					var grid:Grid = new Grid(printDataArray ,400, 600, new RGBColor( 0xE6E6E6 ), new RGBColor( 0xE6E6E6 ), new RGBColor( 0 ), false, new RGBColor( 0x0 ),1, Joint.MITER );
					grid.columns = gridColumns;
					
					printPDF.addPage();
					printPDF.textStyle( new RGBColor(0), 1 );
					printPDF.setFont( FontFamily.ARIAL, Style.BOLD, 8 );
					printPDF.addGrid( grid, 8, 5 );
					
					var currPeriodSelected:String = application.currentFixedperiod;
					var currentUnitSelected:String= application.lastUnitSelection;
					
					var title :String = "Energy Consumption Graph Data w.r.t. Unit : " + currentUnitSelected +" for Period - " + currPeriodSelected.toUpperCase(); 
					printPDF.setFont(FontFamily.ARIAL, Style.NORMAL, 11);
					printPDF.textStyle(new RGBColor (0x000000));
					printPDF.addText(title,80,5);
					
					//var rectWidthPage2:Number = printContainer.width/3;
					//var rectHeightPage2:Number = printContainer.height/3;
					//printPDF.drawRect( new Rectangle(5,10,rectWidthPage2-80,rectHeightPage2-60));
				}
				var f:FileReference = new FileReference();
				f.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHander,false,0,true);
				var bytes:ByteArray = printPDF.save(Method.LOCAL);
				f.save(bytes, "EnergyGraph.pdf");
			}
			private function ioErrorHander(e:IOErrorEvent):void
			{
				Alert.show("Error Occured while saving, Please close file if open any");
			}
			private function formatPDFGridData(gridArray:ArrayCollection):Array
			{
				var currPeriodSelected:String = application.currentFixedperiod;
				var currentUnitSelected:String= application.lastUnitSelection;
				
				var totalPowerUsed:Object;
				var totalOccSaving:Object;
				var totalTasktuneupSaving:Object;
				var toalDaylightHarvesting:Object;
				var sumTotalSaving:Object;
				for(var i:int=0; i< gridArray.length;i++)
				{
					var caputureon:String = gridArray[i].captureon;
					var powerUsed:Object = GlobalUtils.checkNaN(gridArray[i].powerused);
					var occSaving:Object = GlobalUtils.checkNaN(gridArray[i].occsaving);
					var tasktuneSaving:Object = GlobalUtils.checkNaN(gridArray[i].tasktuneupsaving) + GlobalUtils.checkNaN(gridArray[i].manualsaving);
					var daylightHarvesting:Object = GlobalUtils.checkNaN(gridArray[i].ambientsaving);
					var totalsaving:Object = occSaving + tasktuneSaving + daylightHarvesting;
					
					totalPowerUsed += powerUsed;
					totalOccSaving += occSaving;
					totalTasktuneupSaving+=tasktuneSaving;
					toalDaylightHarvesting+=daylightHarvesting;
					sumTotalSaving += totalsaving;
					// Format the Date  according to Period selection
					if(currPeriodSelected.toUpperCase()==Constants.DAY.toUpperCase())
					{
						dateFormatter.formatString = "MMM DD, YYYY LL:NN A";
						caputureon = dateFormatter.format(caputureon);
					}
					else if(currPeriodSelected.toUpperCase()==Constants.WEEK.toUpperCase())
					{
						dateFormatter.formatString = "MMM DD, YYYY";
						caputureon = dateFormatter.format(caputureon);
					}
					else if(currPeriodSelected.toUpperCase()==Constants.MONTH.toUpperCase())
					{
						dateFormatter.formatString = "MMM DD, YYYY";
						caputureon = dateFormatter.format(caputureon);
					}
					else if(currPeriodSelected.toUpperCase()==Constants.YEAR.toUpperCase())
					{
						dateFormatter.formatString="MMM YYYY"
						caputureon = dateFormatter.format(caputureon);
					}
					// Format the Energy data according to Unit selection
					if(currentUnitSelected == Constants.POWER_UNIT)
					{
						powerUsed = GlobalUtils.getCustomEnergyLabel(powerUsed);
						occSaving =  GlobalUtils.getCustomEnergyLabel(occSaving);
						tasktuneSaving =  GlobalUtils.getCustomEnergyLabel(tasktuneSaving);
						daylightHarvesting =  GlobalUtils.getCustomEnergyLabel(daylightHarvesting);
						totalsaving =  GlobalUtils.getCustomEnergyLabel(totalsaving);
						
					}else if(currentUnitSelected == Constants.CARBON_UNIT)
					{
						powerUsed = GlobalUtils.getCarbonUnitEnergyLabel(powerUsed);
						occSaving =  GlobalUtils.getCarbonUnitEnergyLabel(occSaving);
						tasktuneSaving =  GlobalUtils.getCarbonUnitEnergyLabel(tasktuneSaving);
						daylightHarvesting =  GlobalUtils.getCarbonUnitEnergyLabel(daylightHarvesting);
						totalsaving =  GlobalUtils.getCarbonUnitEnergyLabel(totalsaving);
					}else if(currentUnitSelected == Constants.CURRENCY_UNIT)
					{
						powerUsed = GlobalUtils.getCustomMoneyLabel(powerUsed);
						occSaving =  GlobalUtils.getCustomMoneyLabel(occSaving);
						tasktuneSaving =  GlobalUtils.getCustomMoneyLabel(tasktuneSaving);
						daylightHarvesting =  GlobalUtils.getCustomMoneyLabel(daylightHarvesting);
						totalsaving =  GlobalUtils.getCustomMoneyLabel(totalsaving);
					}
					gridArray[i].captureon = caputureon;
					gridArray[i].powerused = powerUsed
					gridArray[i].occsaving = occSaving;
					gridArray[i].tasktuneupsaving = tasktuneSaving;
					gridArray[i].ambientsaving = daylightHarvesting
					gridArray[i].totalsaving = totalsaving;
				}
				// Calculate the total Energy data according to Unit selection
				if(currentUnitSelected == Constants.POWER_UNIT)
				{
					totalPowerUsed = GlobalUtils.getCustomEnergyLabel(totalPowerUsed);
					totalOccSaving =  GlobalUtils.getCustomEnergyLabel(totalOccSaving);
					totalTasktuneupSaving =  GlobalUtils.getCustomEnergyLabel(totalTasktuneupSaving);
					toalDaylightHarvesting =  GlobalUtils.getCustomEnergyLabel(toalDaylightHarvesting);
					sumTotalSaving =   GlobalUtils.getCustomEnergyLabel(sumTotalSaving);
				}else if(currentUnitSelected == Constants.CARBON_UNIT)
				{
					totalPowerUsed = GlobalUtils.getCarbonUnitEnergyLabel(totalPowerUsed);
					totalOccSaving =  GlobalUtils.getCarbonUnitEnergyLabel(totalOccSaving);
					totalTasktuneupSaving =  GlobalUtils.getCarbonUnitEnergyLabel(totalTasktuneupSaving);
					toalDaylightHarvesting =  GlobalUtils.getCarbonUnitEnergyLabel(toalDaylightHarvesting);
					sumTotalSaving =   GlobalUtils.getCarbonUnitEnergyLabel(sumTotalSaving);
				}else if(currentUnitSelected == Constants.CURRENCY_UNIT)
				{
					totalPowerUsed = GlobalUtils.getCustomMoneyLabel(totalPowerUsed);
					totalOccSaving =  GlobalUtils.getCustomMoneyLabel(totalOccSaving);
					totalTasktuneupSaving =  GlobalUtils.getCustomMoneyLabel(totalTasktuneupSaving);
					toalDaylightHarvesting =  GlobalUtils.getCustomMoneyLabel(toalDaylightHarvesting);
					sumTotalSaving =   GlobalUtils.getCustomMoneyLabel(sumTotalSaving);
				}
				var object:Object = new Object();
				object.powerused = totalPowerUsed;
				object.occsaving = totalOccSaving;
				object.tasktuneupsaving = totalTasktuneupSaving;
				object.ambientsaving = toalDaylightHarvesting;
				object.totalsaving = sumTotalSaving;
				object.captureon = "Total ";
				gridArray.addItem(object);	
				return gridArray.toArray();
			}
			/* private function exportASImage(e:MouseEvent):void{
				var imageSnap:ImageSnapshot = ImageSnapshot.captureImage(FlexGlobals.topLevelApplication.baseGroup);
				var imageByteArray:ByteArray = imageSnap.data as ByteArray;
				var f:FileReference = new FileReference();
				f.save(imageByteArray, "EnergyGraph.jpeg"); 
			}*/
			
			private function exportAsCSV(e:MouseEvent):void{
				dispatchEvent( new EnergySummaryDockEvent(EnergySummaryDockEvent.EXPORT, ""));
			}
		]]>
	</fx:Script>
	
	<components:EnergySummaryUnitBar id="energySummaryUnitBar" />
	<mx:VRule height="100%"/>
	<s:Label text="{Constants.PERIOD}" styleName="titleStyle" />
	<s:Button name="{Constants.DAY}" label="{Constants.DAY_LBL}" toolTip="{Constants.ONE_DAY}" buttonMode="true" click="getData(event)" width="45"  />
	<s:Button name="{Constants.WEEK}" label="{Constants.WEEK_LBL}" toolTip="{Constants.ONE_WEEK}" buttonMode="true" click="getData(event)"  width="45"/>
	<s:Button name="{Constants.MONTH}" label="{Constants.MONTH_LBL}" toolTip="{Constants.ONE_MONTH}" buttonMode="true" click="getData(event)"  width="45"/>
	<s:Button name="{Constants.YEAR}" label="{Constants.YEAR_LBL}" toolTip="{Constants.ONE_YEAR}" buttonMode="true" click="getData(event)"  width="45" />
	<mx:VRule height="100%"/>
	<s:Label text="From:"/>
	<mx:DateField id="fromDate" yearNavigationEnabled="true"
				  open="onFromDateOpenHandler()" />
	<s:Label text="To:"/>
	<mx:DateField id="toDate" yearNavigationEnabled="true" 
				   open="onToDateOpenHandler()"/>
	<s:Button id="filterBtn" label="{Constants.APPLY}" click="filterData(event)" />
	
	<mx:VRule height="100%"/>
	<!--<mx:Spacer width="50%"/>-->
	<s:Button name="{Constants.SAVEPDF}"  label="{Constants.SAVEPDF}" toolTip="{Constants.SAVEPDF}" buttonMode="true" click="printData(event)"/>
	<s:Button name="{Constants.EXPORT}"  label="{Constants.EXPORT}" toolTip="{Constants.EXPORT}" buttonMode="true" click="exportAsCSV(event)"/>
	<mx:Image source="{Images.Refresh}" 
			  buttonMode="true"
			  toolTip="Refresh"
			  click="refresh()"/>
	
</s:HGroup>
