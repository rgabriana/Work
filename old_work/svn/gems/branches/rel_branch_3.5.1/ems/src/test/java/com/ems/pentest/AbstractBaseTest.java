package com.ems.pentest;

import javax.annotation.Resource;
import javax.ws.rs.core.Response;

import junit.framework.Assert;

import org.apache.commons.lang.StringUtils;
import org.junit.Before;
import org.junit.BeforeClass;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;

import com.ems.AbstractEnlightedTest;
import com.ems.model.SystemConfiguration;
import com.ems.service.SystemConfigurationManager;
import com.ems.service.UserManager;
import com.ems.utils.CommonUtils;

public abstract class AbstractBaseTest extends AbstractEnlightedTest {
	@Resource(name = "userManager")
	protected UserManager userManager;
	@Resource(name = "systemConfigurationManager")
	protected SystemConfigurationManager systemConfigurationManager;
	@Autowired
	protected MessageSource messageSource;

	protected static final int OK = Response.Status.OK.getStatusCode();
	protected static final int NOT_ACCEPTABLE = Response.Status.NOT_ACCEPTABLE.getStatusCode();
	protected static final int INTERNAL_SERVER_ERROR = Response.Status.INTERNAL_SERVER_ERROR.getStatusCode();
	
	boolean isApplyValidation = true;
	@Before
	public void beforeEveryTest(){
		SystemConfiguration validationFlagConfig = systemConfigurationManager.loadConfigByName("flag.ems.apply.validation");
		if (validationFlagConfig != null) {
			final String isApplyValidationStr = validationFlagConfig.getValue();
			isApplyValidation = StringUtils.isEmpty(isApplyValidationStr)?true:isApplyValidationStr.trim().equalsIgnoreCase("true")?true:false;
		}
		super.beforeEveryTest();
	}
	
	protected void checkAssertFalseWithArgException(final MessageSource messageSource, SystemConfigurationManager systemConfigurationManager,final String paramName, final Object paramNameVal, final int statusCode){
		try{	
			com.ems.ws.util.Response res = CommonUtils.isParamValueAllowed(messageSource, systemConfigurationManager, paramName, paramNameVal);
			Assert.assertEquals(statusCode, res.getStatus());
		} catch (Exception e) {
			logger.error("***FAILED***", e);
			Assert.fail(e.getMessage());
		}
	}
	
	protected void validateValue(final MessageSource messageSource, SystemConfigurationManager systemConfigurationManager,final String paramName, final Object paramNameVal, final int statusCode){
		try{	
			com.ems.ws.util.Response res = CommonUtils.isParamValueAllowed(messageSource, systemConfigurationManager, paramName, paramNameVal);
			Assert.assertEquals(statusCode, !isApplyValidation?Response.Status.OK.getStatusCode():res.getStatus());
		} catch (Exception e) {
			logger.error("***FAILED***", e);
			Assert.fail(e.getMessage());
		}
	}
	
	protected void validateValue(final String paramName, final Object paramNameVal, final int statusCode){
		try{	
			//Call in actual controller as following
//			  CommonUtils.isParamValueAllowed(messageSource, systemConfigurationManager, "admin.org.settings.refreshTree", refreshTree);
//			    @Resource(name = "messageSource")
//		    private MessageSource messageSource;
//
//		    @Resource(name = "systemConfigurationManager")
//			private SystemConfigurationManager systemConfigurationManager;
			com.ems.ws.util.Response res = CommonUtils.isParamValueAllowed(messageSource, systemConfigurationManager, paramName, paramNameVal);
			Assert.assertEquals(statusCode, !isApplyValidation?Response.Status.OK.getStatusCode():res.getStatus());
		} catch (Exception e) {
			logger.error("***FAILED***", e);
			Assert.fail(e.getMessage());
		}
	}
	
	protected void checkAssertFalseWithArgException(final MessageSource messageSource, SystemConfigurationManager systemConfigurationManager,final String paramName, final Object paramNameVal){
		checkAssertFalseWithArgException(messageSource, systemConfigurationManager, paramName, paramNameVal, Response.Status.OK.getStatusCode());
	}

	
}
