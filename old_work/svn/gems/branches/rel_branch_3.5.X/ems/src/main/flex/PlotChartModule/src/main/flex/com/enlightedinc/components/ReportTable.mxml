<?xml version="1.0" encoding="utf-8"?>
<!--
ReportsTable is used to display details of the fixture status, location, etc. 
This table is reused for both "Bulb Report" and "Outage Report".
If "Bulb Report" is inserted again, table columns should be handled.
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:components="com.enlightedinc.components.*">
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter" formatString="YYYY-MM-DD JJ:NN:SS"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			[Bindable]
			public var application:Object = FlexGlobals.topLevelApplication;
			[Bindable]
			public var scheduleImageUpgradeDeviceData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var imageUpgradeFixtureData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var imageUpgradeGatewayData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var switchFixtureData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var switchPlugloadData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var wdsData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var plugloadData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var groupFixtureData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var motionGrpFxDetails:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var motionGrpPgDetails:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var currentTab:String ="";
			
			[Bindable]
			private var showImageUpgradeGroup:Boolean=false;
			
			[Bindable]
			private var showScheduleImageUpgradeGroup:Boolean=false;
			
			[Bindable]
			private var showReportGroup:Boolean=true;
			[Bindable]
			private var showLampOutageReportGroup:Boolean=false;
			[Bindable]
			private var showWdsGroup:Boolean=false;
			[Bindable]
			private var showFixturesGroup:Boolean=false;
			[Bindable]
			private var showSceneTableGroup:Boolean=false;
			[Bindable]
			private var showGrpFixturesGroup:Boolean=false;
			[Bindable]
			private var showMotionGrpFixturesGroup:Boolean=false;
			[Bindable]
			private var showPlugLoadTab:Boolean=true;
			private var lastIndex :Number = -1;
			public function showView(m_propertyMode:String,m_propertyModeId:String,widgetTabSelected:String):void
			{
				if(m_propertyMode == Constants.IMAGE_UPGRADE)
				{
					showImageUpgradeGroup=true;
					showScheduleImageUpgradeGroup=false;
					showReportGroup=false;
					showWdsGroup=false;
					showFixturesGroup = false;
					showSceneTableGroup=false;
					showLampOutageReportGroup=false;
					showMotionGrpFixturesGroup=false;
					showPlugLoadTab = Boolean((application.plotChartView as PlotChartView).m_enablePlugloadFeature);
				}
				else if(m_propertyMode == Constants.SCHEDULE_IMAGE_UPGRADE)
				{
					showImageUpgradeGroup=false;
					showScheduleImageUpgradeGroup=true;
					showReportGroup=false;
					showWdsGroup=false;
					showFixturesGroup = false;
					showSceneTableGroup=false;
					showLampOutageReportGroup=false;
					showMotionGrpFixturesGroup=false;
				}
				else if(m_propertyMode == Constants.SWITCH_MODE)
				{
					if(widgetTabSelected==Constants.FIXTURE_TAB)
					{
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showFixturesGroup = true;
						showWdsGroup=false;
						showReportGroup=false;
						showSceneTableGroup=false;
						showLampOutageReportGroup=false;
						showMotionGrpFixturesGroup=false;
						
					}else if(widgetTabSelected==Constants.WDS_TAB)
					{
						showWdsGroup=true;
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showReportGroup=false;
						showSceneTableGroup=false;
						showFixturesGroup = false;
						showLampOutageReportGroup=false;
						showMotionGrpFixturesGroup=false;
					}
					else if( widgetTabSelected==Constants.SCENE_TAB)
					{
						showSceneTableGroup=true;
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showReportGroup=false;
						showWdsGroup=false;
						showFixturesGroup = false;
						showLampOutageReportGroup=false;
						showMotionGrpFixturesGroup=false;
					}
				}
				else if(m_propertyMode == Constants.GROUP_MODE)
				{
					if(widgetTabSelected==Constants.FIXTURE_TAB)
					{
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showFixturesGroup = false;
						showWdsGroup=false;
						showReportGroup=false;
						showSceneTableGroup=false;
						showGrpFixturesGroup=false;
						showLampOutageReportGroup=false;
						showMotionGrpFixturesGroup=true;
						if((application.plotChartView as PlotChartView).m_groupId != "" && (application.plotChartView as PlotChartView).m_fixtureVersion != "")
						{
							if((application.plotChartView as PlotChartView).m_fixtureVersion == "1.5"){
								if(grpMotionTabNavigator.numChildren == 2){
									grpMotionTabNavigator.removeChildAt(1);
								}
							}
						}
					}
				}else if(m_propertyMode == Constants.MOTION_BITS_GROUP_MODE)
				{
					if(widgetTabSelected==Constants.FIXTURE_TAB)
					{
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showFixturesGroup = false;
						showWdsGroup=false;
						showReportGroup=false;
						showSceneTableGroup=false;
						showGrpFixturesGroup=true;
						showLampOutageReportGroup=false;
						showMotionGrpFixturesGroup=false;
					}
				}else if(m_propertyModeId==Constants.BULB){
						showLampOutageReportGroup=true;
						showReportGroup=false;
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showWdsGroup=false;
						showFixturesGroup = false;
						showMotionGrpFixturesGroup=false;
				}else
				{
						showReportGroup=true;
						showImageUpgradeGroup=false;
						showScheduleImageUpgradeGroup=false;
						showWdsGroup=false;
						showFixturesGroup = false;
						showLampOutageReportGroup=false;
						showMotionGrpFixturesGroup=false;
				}
			}
			
			public function removeSelection():void
			{
				if(showSceneTableGroup)
				{
					sceneTableGrid.selectedItems = [];
					sceneTablePlugloadGrid.selectedItems = [];
				}
				else if(showFixturesGroup){
					fixturesTableGrid.selectedItems = [];
					plugloadTableGrid.selectedItems = [];
				}
				else if(showGrpFixturesGroup)
					grpFixturesTableGrid.selectedItems = [];
				else if(showWdsGroup)
				{
					wdsTableGrid.selectedItems = [];
				}else if(showMotionGrpFixturesGroup)
				{
					grpMotionFixturesTableGrid.selectedItems =[];
					grpMotionPlugloadsTableGrid.selectedItems=[];
				}
			}
			
			public function selectFixture(fixtureId:String):void
			{
				if(showGrpFixturesGroup)
				{
					for(var n:int=0; n<groupFixtureData.length; n++)
					{
						if(groupFixtureData[n].id == fixtureId)
						{
							var selArray1:Array = new Array();

							selArray1 = grpFixturesTableGrid.selectedItems;
							selArray1.push(groupFixtureData[n]);
							grpFixturesTableGrid.selectedItems = selArray1;
							break;
						}
					}
				}else if(showMotionGrpFixturesGroup)
				{
					//MOTION GROUP WIZRAD
					for(var n2:int=0; n2<motionGrpFxDetails.length; n2++)
					{
						if(motionGrpFxDetails[n2].id == fixtureId)
						{
							var selArray1:Array = new Array();
							
							selArray1 = grpMotionFixturesTableGrid.selectedItems;
							selArray1.push(motionGrpFxDetails[n2]);
							grpMotionFixturesTableGrid.selectedItems = selArray1;
							break;
						}
					}
				}
				else if(showImageUpgradeGroup)
				{
					//IMAGE UPGRADE WIZRAD
					imageUpgradeFixtureGrid.selectedIndex = -1;
					for(var n1:int=0; n1<imageUpgradeFixtureData.length; n1++)
					{
						if(imageUpgradeFixtureData[n1].id == fixtureId)
						{
							var selArray1:Array = new Array();
							
							selArray1 = imageUpgradeFixtureGrid.selectedItems;
							selArray1.push(imageUpgradeFixtureData[n1]);
							imageUpgradeFixtureGrid.selectedItems = selArray1;
							break;
						}
					}
				}
				else
				{
					for(var l:int=0; l<switchFixtureData.length; l++)
					{
						if(switchFixtureData[l].id == fixtureId)
						{
							var selArray:Array = new Array();
							if(showSceneTableGroup)
								selArray = sceneTableGrid.selectedItems;
							else if(showFixturesGroup)
								selArray = fixturesTableGrid.selectedItems;
	
							selArray.push(switchFixtureData[l]);
							
							if(showSceneTableGroup)
								sceneTableGrid.selectedItems = selArray;
							else if(showFixturesGroup)
								fixturesTableGrid.selectedItems = selArray;
							break;
						}
					}
				}
			}

			public function selectGateway(gatewayId:String):void
			{
				for(var l:int=0; l<imageUpgradeGatewayData.length; l++)
				{
					if(imageUpgradeGatewayData[l].id == gatewayId)
					{
						reportTabNavigator.selectedIndex = 1;
						imageUpGradeGatewayGrid.selectedIndex = l;
						break;
					}
				}
			}
			public function selectWds(wdsId:String):void
			{
				for(var l:int=0; l<wdsData.length; l++)
				{
					if(wdsData[l].id == wdsId)
					{
						var selArray:Array = new Array();
						selArray.push(wdsData[l]);
						if(showWdsGroup)
							wdsTableGrid.selectedItems = selArray;
						else if(showImageUpgradeGroup)
							imageUpgradeWDSGrid.selectedItems = selArray;
						break;
					}
				} 
			}
			public function selectPlugload(plugloadId:String):void
			{
				if(showFixturesGroup || showSceneTableGroup )
				{
					for(var l:int=0; l<switchPlugloadData.length; l++)
					{
						if(switchPlugloadData[l].id == plugloadId)
						{
							var selArray:Array = new Array();
							if(showSceneTableGroup)
								selArray = sceneTablePlugloadGrid.selectedItems;
							else if(showFixturesGroup)
								selArray = plugloadTableGrid.selectedItems;
							
							selArray.push(switchPlugloadData[l]);
							
							if(showSceneTableGroup)
								sceneTablePlugloadGrid.selectedItems = selArray;
							else if(showFixturesGroup)
								plugloadTableGrid.selectedItems = selArray;
							break;
						}
					}
				}
				else if(showMotionGrpFixturesGroup)
				{
					//MOTION GROUP WIZRAD
					for(var n:int=0; n<motionGrpPgDetails.length; n++)
					{
						if(motionGrpPgDetails[n].id == plugloadId)
						{
							var selArray1:Array = new Array();
							
							selArray1 = grpMotionPlugloadsTableGrid.selectedItems;
							selArray1.push(motionGrpPgDetails[n]);
							grpMotionPlugloadsTableGrid.selectedItems = selArray1;
							break;
						}
					}
				}else if(showImageUpgradeGroup)
				{
					imageUpgradePlugloadGrid.selectedIndex = -1;
					//Image upgrade WIZRAD
					for(var n3:int=0; n3<plugloadData.length; n3++)
					{
						if(plugloadData[n3].id == plugloadId)
						{
							var selArray2:Array = new Array();
							
							selArray2 = imageUpgradePlugloadGrid.selectedItems;
							selArray2.push(plugloadData[n3]);
							imageUpgradePlugloadGrid.selectedItems = selArray2;
							break;
						}
					}
				}
			}
			private function outageSince(obj:Object,column:DataGridColumn):String
			{
				return dateFormatter.format(obj.outageSince);
			}
			//change="foo.text = imageUpgradeFixtureGrid.selectedIndices.toString()"

			protected function reportTabNavigator_changeHandler(event:IndexChangedEvent):void
			{
				
			}

			private function sortOutageSince(obj1:Object, obj2:Object):int 
			{
				var date1:Date = application.plotChartView.createDate(obj1.outageSince);
				var date2:Date = application.plotChartView.createDate(obj2.outageSince);
				
				if(date1.valueOf() < date2.valueOf())
					return -1;
				else if(date1.valueOf() > date2.valueOf())
					return 1;
				else
					return 0;
			}

			private function fixtureClickEvent(event:ListEvent):void {
				application.removeSelection(false);
				
				for(var n:int = 0; n < event.currentTarget.selectedItems.length; n++)
					application.selectFixture(event.currentTarget.selectedItems[n].id);
			}
			private function plugloadClickEvent(event:ListEvent):void {
				application.removeSelection(false);
				
				for(var n:int = 0; n < event.currentTarget.selectedItems.length; n++)
					application.selectPlugload(event.currentTarget.selectedItems[n].id);
			}
			private function gatewayClickEvent(event:ListEvent):void {
				//application.selectGateway(this.switchFixtureData[event.rowIndex].id);
				application.removeSelection(false);
				for(var n:int = 0; n < event.currentTarget.selectedItems.length; n++)
					application.selectGateway(event.currentTarget.selectedItems[n].id);
			}
			
			private function wdsClickEvent(event:ListEvent):void {
				application.removeSelection(false);
				
				for(var n:int = 0; n < event.currentTarget.selectedItems.length; n++)
					application.selectWDS(event.currentTarget.selectedItems[n].id);
			}

			public function wdsEditHandler(event:MouseEvent) : void {
				var currentWdsObj:Object = wdsTableGrid.selectedItem;
				ExternalInterface.call("showWdsEdit", currentWdsObj.id, "", true);
			}
			
			public function wdsDeleteHandler(event:MouseEvent) : void {
				
			}
			/*
			protected function imageUpGradeGatewayGrid_clickHandler(event:MouseEvent):void
			{
				 if(imageUpGradeGatewayGrid.selectedIndex == lastIndex)
					imageUpGradeGatewayGrid.selectedIndex = -1;
				lastIndex = imageUpGradeGatewayGrid.selectedIndex;
			}*/
			
			private function switchFixtureComparareFunction(obj1:Object, obj2:Object):int 
			{
				var preGwId:Number = obj1.secgwid;
				var newGwId:Number = obj2.secgwid;
				if(preGwId < newGwId)
					return -1;
				else if(preGwId > newGwId)
					return 1;
				else
					return 0;
			}

			private function switchPlugloadLabelFunction(obj:Object,column:DataGridColumn):String
			{
				return obj.gateway.name;
			}
			
			private function switchPlugloadComparareFunction(obj1:Object, obj2:Object):int 
			{
				var preGwId:Number = obj1.secGwId;
				var newGwId:Number = obj2.secGwId;
				if(preGwId < newGwId)
					return -1;
				else if(preGwId > newGwId)
					return 1;
				else
					return 0;
			}
			
			private function switchFixtureLabelFunction(obj:Object,column:DataGridColumn):String
			{
				return obj.gateway.name;
			}
			
		]]>
	</fx:Script>
	
	<mx:VBox id="imageUpgradeTableGroup" includeInLayout="{showImageUpgradeGroup}" visible="{showImageUpgradeGroup}" width="100%" height="100%">
		<mx:TabNavigator creationPolicy="all" borderStyle="solid" id="reportTabNavigator"  width="100%" height="100%" change="reportTabNavigator_changeHandler(event)">
			<mx:VBox label="Fixture" 
					 width="100%" 
					 height="100%">
				<mx:DataGrid id="imageUpgradeFixtureGrid" width="100%" height="100%" draggableColumns="false"
											 allowMultipleSelection="true" dataProvider="{imageUpgradeFixtureData}" itemClick="fixtureClickEvent(event);" >
					<mx:columns>
						<mx:DataGridColumn dataField="name" headerText="Fixture Name" width="90" />
						<mx:DataGridColumn dataField="upgradestatus" headerText="Upgrade Status"/>
						<mx:DataGridColumn dataField="version" headerText="Version" />
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:VBox label="Gateway" 
					 width="100%" 
					 height="100%">
				
				<mx:DataGrid id="imageUpGradeGatewayGrid" width="100%" height="100%" draggableColumns="false"
											 allowMultipleSelection="true" dataProvider="{imageUpgradeGatewayData}" itemClick="gatewayClickEvent(event);">
					<mx:columns>
						<mx:DataGridColumn dataField="name" headerText="Gateway Name" />
						<mx:DataGridColumn dataField="upgradestatus" headerText="Upgrade Status" />
						<mx:DataGridColumn dataField="app2version" headerText="Version" />
					</mx:columns>
				</mx:DataGrid>
				
				
			</mx:VBox>
			<mx:VBox label="ERC" 
				 width="100%" 
				 height="100%">
				<mx:DataGrid id="imageUpgradeWDSGrid" width="100%" height="100%" draggableColumns="false"
										 allowMultipleSelection="true" dataProvider="{wdsData}"  itemClick="wdsClickEvent(event);">
				<mx:columns>
					<mx:DataGridColumn dataField="name" headerText="ERC Name" />
					<mx:DataGridColumn dataField="upgradestatus" headerText="Upgrade Status" />
					<mx:DataGridColumn dataField="version" headerText="Version" />
				</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:VBox label="Plugload" 
					 width="100%" 
					 height="100%">
				<mx:DataGrid id="imageUpgradePlugloadGrid" width="100%" height="100%" draggableColumns="false"
							 allowMultipleSelection="true" dataProvider="{plugloadData}" 
							 includeInLayout="{showPlugLoadTab}" visible="{showPlugLoadTab}" itemClick="plugloadClickEvent(event);">
					<mx:columns>
						<mx:DataGridColumn dataField="name" headerText="Plugload Name" width="140" />
						<mx:DataGridColumn dataField="upgradestatus" headerText="Upgrade Status" />
						<mx:DataGridColumn dataField="version" headerText="Version" />
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:TabNavigator>
	</mx:VBox>
	
	<mx:VBox id="scheduleImageUpgradeTableGroup" includeInLayout="{showScheduleImageUpgradeGroup}" visible="{showScheduleImageUpgradeGroup}" width="100%" height="100%">
		<mx:VBox label="Device" 
					 width="100%" 
					 height="100%">
				<mx:DataGrid id="scheduleImageUpgradeGrid" width="100%" height="100%" draggableColumns="false"
							 allowMultipleSelection="true" dataProvider="{scheduleImageUpgradeDeviceData}"  >
					<mx:columns>
						<mx:DataGridColumn dataField="name" headerText="Device Name" width="90" />
						<mx:DataGridColumn dataField="modelNo" headerText="Model No"/>
						<mx:DataGridColumn dataField="version" headerText="Version" />
					</mx:columns>
				</mx:DataGrid>
		</mx:VBox>
	</mx:VBox>
	
	<mx:VBox id="reportTableGroup"  width="100%" height="100%" includeInLayout="{showReportGroup}" visible="{showReportGroup}">
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 width="100%" height="100%" id="reportTableGrid" draggableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Fixture Name" dataField="name"/>
				<mx:DataGridColumn headerText="Location" dataField="location"/>
				<mx:DataGridColumn headerText="Outage Since" labelFunction="outageSince" sortCompareFunction="sortOutageSince"/>
				<mx:DataGridColumn headerText="Description" dataField="description"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>

	<mx:VBox id="lampOutageReportTableGroup"  width="100%" height="100%" includeInLayout="{showLampOutageReportGroup}" visible="{showLampOutageReportGroup}">
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 width="100%" height="100%" id="lampOutageReportTableGrid" draggableColumns="false" >
			<mx:columns>
				<mx:DataGridColumn headerText="Fixture Name" dataField="name" width="140" />
				<mx:DataGridColumn headerText="Location" dataField="location" width="100" showDataTips="true"/>
				<mx:DataGridColumn headerText="Outage Since" labelFunction="outageSince" width="125" sortCompareFunction="sortOutageSince"/>
				<mx:DataGridColumn headerText="Ballast Type" dataField="displayLabel" width="150" showDataTips="true"/>
				<mx:DataGridColumn headerText="Description" dataField="outageDescription" width="140" showDataTips="true"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	
	
	<mx:VBox id="grpMotionFixturesTableGroup" includeInLayout="{showMotionGrpFixturesGroup}" visible="{showMotionGrpFixturesGroup}" width="100%" height="100%">
		<mx:TabNavigator creationPolicy="all" borderStyle="solid" id="grpMotionTabNavigator"  width="100%" height="100%" >
			<mx:VBox label="Fixture" 
					 width="100%" 
					 height="100%">
				<mx:DataGrid id="grpMotionFixturesTableGrid" width="100%" height="100%" draggableColumns="false"
											 allowMultipleSelection="true" dataProvider="{motionGrpFxDetails}"  itemClick="fixtureClickEvent(event);">
					<mx:columns>
						<mx:DataGridColumn headerText="Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer"/>
						<mx:DataGridColumn headerText="Type" itemRenderer="com.enlightedinc.components.renderers.ConfigurationTypeDropDown" />
						<mx:DataGridColumn headerText="Location" dataField="location" width="200" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer" visible="{!application.plotChartView.showFloorPlanOuterContainer}"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:VBox label="Plugload" 
					 width="100%" 
					 height="100%">
				<mx:DataGrid id="grpMotionPlugloadsTableGrid" width="100%" height="100%" draggableColumns="false"
							 allowMultipleSelection="true" dataProvider="{motionGrpPgDetails}" itemClick="plugloadClickEvent(event);"
							 includeInLayout="{showPlugLoadTab}" visible="{showPlugLoadTab}">
					<mx:columns>
						<mx:DataGridColumn headerText="Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer"/>
						<mx:DataGridColumn headerText="Type" itemRenderer="com.enlightedinc.components.renderers.ConfigurationTypePlugloadDropDown" />
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:TabNavigator>
	</mx:VBox>
	
	<mx:VBox id="grpFixturesTableGroup"  width="100%" height="100%" includeInLayout="{showGrpFixturesGroup}" visible="{showGrpFixturesGroup}">
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 width="100%" height="100%" id="grpFixturesTableGrid" dataProvider="{groupFixtureData}" itemClick="fixtureClickEvent(event);"
					 allowMultipleSelection="true" draggableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer"/>
				<mx:DataGridColumn headerText="Location" dataField="location" width="200" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer" visible="{!application.plotChartView.showFloorPlanOuterContainer}"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>

	<mx:VBox id="fixturesTableGroup"  width="100%" height="100%" includeInLayout="{showFixturesGroup}" visible="{showFixturesGroup}">
		
		<mx:TabNavigator creationPolicy="all" borderStyle="solid" id="grpSwitchTabNavigator"  width="100%" height="100%" includeInLayout="{showFixturesGroup}" visible="{showFixturesGroup}">
			<mx:VBox label="Fixture" 
					 width="100%" 
					 height="100%">
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 width="100%" height="100%" id="fixturesTableGrid" dataProvider="{switchFixtureData}" itemClick="fixtureClickEvent(event);" 
					 allowMultipleSelection="true" draggableColumns="false">
			<mx:columns>
				<mx:DataGridColumn dataField="needSync" headerText="" itemRenderer="com.enlightedinc.components.renderers.FixtureSynchStatusIconRenderer" width="20" textAlign="center" sortable="false"/>
				<mx:DataGridColumn headerText="Device Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer"/>
				<mx:DataGridColumn headerText="Location"  dataField="location" width="200" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer" visible="{!application.plotChartView.showFloorPlanOuterContainer}"/>
				<mx:DataGridColumn headerText="Gateway Name" dataField="secgwid" labelFunction="switchFixtureLabelFunction" sortCompareFunction="switchFixtureComparareFunction"  />
				<mx:DataGridColumn headerText="Device Type" dataField="type" />
			</mx:columns>
		</mx:DataGrid>
		</mx:VBox>
		<mx:VBox label="Plugload" 
				 width="100%" 
				 height="100%">
			<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
						 xmlns:s="library://ns.adobe.com/flex/spark" 
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 width="100%" height="100%" id="plugloadTableGrid" dataProvider="{switchPlugloadData}" itemClick="plugloadClickEvent(event);" 
						 allowMultipleSelection="true" draggableColumns="false">
				<mx:columns>
					<mx:DataGridColumn dataField="needSync" headerText="" itemRenderer="com.enlightedinc.components.renderers.FixtureSynchStatusIconRenderer" width="20" textAlign="center" sortable="false"/>
					<mx:DataGridColumn headerText="Device Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer"/>
					<mx:DataGridColumn headerText="Location"  dataField="location" width="200" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer" visible="{!application.plotChartView.showFloorPlanOuterContainer}"/>
					<mx:DataGridColumn headerText="Gateway Name" dataField="secGwId" labelFunction="switchPlugloadLabelFunction" sortCompareFunction="switchPlugloadComparareFunction"  />
					<mx:DataGridColumn headerText="Device Type" dataField="type" />
				</mx:columns>
			</mx:DataGrid>
			</mx:VBox>
		</mx:TabNavigator>
	</mx:VBox>
	
	<mx:VBox id="wdsTableGroup"  width="100%" height="100%" includeInLayout="{showWdsGroup}" visible="{showWdsGroup}">
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 width="100%" height="100%" id="wdsTableGrid" dataProvider="{wdsData}" itemClick="wdsClickEvent(event);" draggableColumns="false">
			<mx:columns>
				<mx:DataGridColumn width="80" headerText="Name" dataField="name"/>
				<mx:DataGridColumn headerText="Model" dataField="modelNo" />
				<mx:DataGridColumn width="80" headerText="Action" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox>
								<mx:Button label="Edit" click="outerDocument.wdsEditHandler(event);"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	
	<mx:VBox id="sceneTableGroup" width="100%" height="100%" includeInLayout="{showSceneTableGroup}" visible="{showSceneTableGroup}">
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 allowMultipleSelection="true"
					 width="100%" height="100%" id="sceneTableGrid" dataProvider="{switchFixtureData}" itemClick="fixtureClickEvent(event);" draggableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Fixture Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer" />
				<mx:DataGridColumn headerText="Light Level" dataField="lightlevel" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer"/>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 allowMultipleSelection="true"
					 width="100%" height="100%" id="sceneTablePlugloadGrid" dataProvider="{switchPlugloadData}" itemClick="plugloadClickEvent(event);" draggableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="Plugload Name" dataField="name" itemRenderer="com.enlightedinc.components.renderers.WidgetFixtureLabelRenderer" />
				<mx:DataGridColumn headerText="Light Level" dataField="lightlevel" itemRenderer="com.enlightedinc.components.renderers.ConfigurationTypePlugloadSceneDropDown"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>

</mx:VBox>
