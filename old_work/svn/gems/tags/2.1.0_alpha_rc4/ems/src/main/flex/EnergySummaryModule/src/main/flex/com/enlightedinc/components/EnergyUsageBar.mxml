<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 xmlns:components="com.enlightedinc.components.*" paddingTop="5" creationComplete="initComponent()">
	<fx:Script>
		<![CDATA[
			import com.enlightedinc.common.CountsCalculator;
			import com.enlightedinc.events.CurrentSavingChartUpdate;
			import com.enlightedinc.events.EnergySummaryUnitBarEvent;
			
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import mx.core.FlexGlobals;
			
			import spark.components.Button;

			private var currSelButton:Button;
			[Bindable]
			private var countsCalculator:CountsCalculator= CountsCalculator.getInstance();
			private var application:Object = FlexGlobals.topLevelApplication;
			private function initComponent():void{
				countsCalculator.addEventListener(CurrentSavingChartUpdate.CHART_UPDATE,chartUpdate);
				application.energySummaryView.addEventListener(CurrentSavingChartUpdate.CHART_RESET,chartReset);
				application.energySummaryDock.energySummaryUnitBar.addEventListener(EnergySummaryUnitBarEvent.UNIT_CHANGE,unitChangeHandler);
				application.energySummaryView.addEventListener(EnergySummaryUnitBarEvent.UNIT_CHANGE,unitChangeHandler);
				//initialiseValues();
			}
			private function percetPrecision(value:Number):String{
				if(!isNaN(value))
				{
					if(value<100)
						return Number(value).toString()+"%";
					else
						return "100%";
				}
				else
					return "0%";
			}
			private function powerPrecision(value:Number,type:String=""):String{
				var power:Number=0;
				var unitSuffix:String ="Wh";
				var currentUnitSuffix:String ="W";
				if(!isNaN(value))
				{
					if(value<=999)
					{
						power = Math.round(Number(value));
						unitSuffix = "Wh";
						currentUnitSuffix = "W";
					}
					else if(value >= 1000)
					{
						power = Math.round(Number(value* 0.001));
						unitSuffix = "kWh";
						currentUnitSuffix = "kW";
					}
					else if(value>= 1000000)
					{
						power = Math.round(Number(value* 0.000001));
						unitSuffix = "mWh";
						currentUnitSuffix = "mW";
					}
					if(type=="")
					{
						suffixSignSymbol.text = unitSuffix;
					}
					else
					{
						currentsuffixSignSymbol1.text = currentUnitSuffix;
						currentsuffixSignSymbol2.text = currentUnitSuffix;
						currentsuffixSignSymbol3.text = currentUnitSuffix;
					}
					return numberFormatter.format(power).toString();// +" "+unitSuffix
				}
				else
				{
					suffixSignSymbol.text = unitSuffix;
					currentsuffixSignSymbol1.text = currentUnitSuffix;
					currentsuffixSignSymbol2.text = currentUnitSuffix;
					currentsuffixSignSymbol3.text = currentUnitSuffix;
					return "0";
				}
			}
			private function co2Precision(labelValue:Number):String
			{
				var unitSuffix:String ="";
				var co2:Number=0;
				if(!isNaN(labelValue))
				{
					if (Number(labelValue)>= 1000000)
					{
						unitSuffix = "Mt";
						co2 =  Math.round(Number(labelValue));
					}
					else if (Number(labelValue) >= 1000)
					{
						unitSuffix = "kt";
						co2 = Math.round((Number(labelValue)/1000));
					}
					else
					{
						unitSuffix = "tons";
						co2 = Math.round(Number(labelValue));
					}
					suffixSignSymbol.text = unitSuffix;
					return numberFormatter.format(co2).toString();
				}else
				{
					suffixSignSymbol.text = unitSuffix;
					return "0";
				}
			}
			private function unitChangeHandler(e:EnergySummaryUnitBarEvent):void
			{
				//var selectedButton:Button = (e.label as Button);
				//currSelButton = selectedButton;
				if(e.label==Constants.CURRENCY_UNIT)
				{
					prefixSignSymbol.visible =true;
					suffixSignSymbol.visible = false;
					//savingSoFar.setStyle("textAlign","left");
					countsCalculator.currentUnitSelection= Constants.CURRENCY_UNIT;
					countsCalculator.calculateMoneyCounts(countsCalculator.energyConsumptionRawDataCollection);
					if(countsCalculator.totalSavedCost>=0)
						savingSoFar.text =numberFormatter.format(String(Math.round(countsCalculator.totalSavedCost)));
				}else if(e.label==Constants.POWER_UNIT)
				{
					prefixSignSymbol.visible =false;
					suffixSignSymbol.visible = true;
					//savingSoFar.setStyle("textAlign","right");
					countsCalculator.currentUnitSelection= Constants.POWER_UNIT;
					countsCalculator.calculateKwhCounts(countsCalculator.energyConsumptionRawDataCollection);
					savingSoFar.text = powerPrecision(Math.round(countsCalculator.totalSavedPower));
					
				}else if(e.label==Constants.CARBON_UNIT)
				{
					prefixSignSymbol.visible =false;
					suffixSignSymbol.visible = true;
					//savingSoFar.setStyle("textAlign","right");
					countsCalculator.currentUnitSelection= Constants.CARBON_UNIT;
					countsCalculator.calculateCO2Counts(countsCalculator.energyConsumptionRawDataCollection);
					var carbonCount:Number = Math.round(Constants.CARBON_FACTOR * countsCalculator.totalSavedPower);
					savingSoFar.text= co2Precision(carbonCount);
					/*
					if(carbonCount<Constants.MAX_CO2_SAVING)
						savingSoFar.text= numberFormatter.format(String(carbonCount)).toString();// +" t ";
					else
						savingSoFar.text= numberFormatter.format(String(Math.round(carbonCount/1000))).toString();// +" kt ";
					*/
				}
				application.energyGraphHeader.setHeaderTitle();
				
			}
			private function initialiseValues():void{
				var selectedButton:Button = currSelButton as Button;
				if(selectedButton!=null)
				{
					if(selectedButton.label==Constants.CURRENCY_UNIT)
					{
						suffixSignSymbol.visible = false;
						prefixSignSymbol.visible =true;
						//savingSoFar.setStyle("textAlign","left");
						countsCalculator.currentUnitSelection= Constants.POWER_UNIT;
						countsCalculator.calculateMoneyCounts(countsCalculator.energyConsumptionRawDataCollection);
						if(countsCalculator.totalSavedCost>=0)
							savingSoFar.text =numberFormatter.format(String(Math.round(countsCalculator.totalSavedCost)));
						
					}else if(selectedButton.label==Constants.POWER_UNIT)
					{
						prefixSignSymbol.visible =false;
						suffixSignSymbol.visible = true;
						//savingSoFar.setStyle("textAlign","right");
						countsCalculator.currentUnitSelection= Constants.POWER_UNIT;
						countsCalculator.calculateKwhCounts(countsCalculator.energyConsumptionRawDataCollection);
						savingSoFar.text = powerPrecision(Math.round(countsCalculator.totalSavedPower));
						
					}else if(selectedButton.label==Constants.CARBON_UNIT)
					{
						prefixSignSymbol.visible =false;
						suffixSignSymbol.visible = true;
						//savingSoFar.setStyle("textAlign","right");
						countsCalculator.currentUnitSelection= Constants.CARBON_UNIT;
						countsCalculator.calculateCO2Counts(countsCalculator.energyConsumptionRawDataCollection);
						var carbonCount:Number = Math.round(Constants.CARBON_FACTOR * countsCalculator.totalSavedPower);
						savingSoFar.text= co2Precision(carbonCount);
						/*
						if(carbonCount<Constants.MAX_CO2_SAVING)
							savingSoFar.text= numberFormatter.format(String(carbonCount)).toString();// +" t ";
						else
							savingSoFar.text= numberFormatter.format(String(Math.round(carbonCount/1000))).toString();// +" kt ";
						*/
					}
				}
				application.energyGraphHeader.setHeaderTitle();
			}
			private function chartUpdate(e:CurrentSavingChartUpdate):void
			{
				if(countsCalculator.savingMeterData.length>0)
					energySavingGraph.chartData = countsCalculator.savingMeterData;
			}
			private function chartReset(e:CurrentSavingChartUpdate):void{
				savingCurrPerc.text ="0%";
				energySavingGraph.resetUI();
			}
			
			

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!--<mx:CurrencyFormatter id="currencyFormatter"
							  currencySymbol="$" 
							  useThousandsSeparator="true"
							  precision="0" />-->
		<mx:NumberFormatter id="numberFormatter" useThousandsSeparator="true"  />

	</fx:Declarations>
	
	<!--<s:BorderContainer width="100%" cornerRadius="15" borderAlpha="0.5">-->
	<!--<s:filters>
		<s:DropShadowFilter distance="5" angle="30" color="#d8d8d8"/>
	</s:filters>
		<s:Rect height="100%" radiusX="15" width="100%">
			<s:fill>
				<s:LinearGradient rotation="270">
					<s:GradientEntry alpha="0" color="#000000" ratio="0"/>
					<s:GradientEntry alpha="0.5" color="#d8d8d8" ratio="0.8"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>-->
	
		<s:HGroup width="100%" paddingLeft="0" height="110" gap="-1">
			<s:filters>
				<s:DropShadowFilter distance="3" angle="90" color="#b1b1b1"/>
			</s:filters>
			<components:GroupBox height="100%" width="100%" label="{Constants.PERIOD_SAVING}" skinClass="com.enlightedinc.components.skins.GroupBoxLegendSkin" >
				<s:VGroup verticalAlign="middle" paddingLeft="10" paddingTop="10">
					<!--<s:BorderContainer styleName="summaryTitleStyleBackBg" height="20" width="95">
						<s:Label text="Savings so far" styleName="summaryTitleStyle" height="100%" width="100%" />
					</s:BorderContainer>-->
					<s:HGroup>
						<s:BorderContainer id="brdr"
								  width="85" height="60"
								  horizontalCenter="0" verticalCenter="0"
								  styleName="savingPercBorderStyle">
							<s:Label id="savingSoFarPerc" styleName="savingPercLabelStyle"  text="{percetPrecision(countsCalculator.savingSoFarPercVal)}" 
									 width="85" height="60"/>
						</s:BorderContainer>
						<s:VGroup gap="5" horizontalAlign="center">
							<s:HGroup gap="0">
								<s:Label id="prefixSignSymbol" text="$" styleName="prefixSignStyle" height="100%" width="15" />
								<s:BorderContainer width="170" height="32" cornerRadius="5">
									<s:borderStroke> 
										<mx:SolidColorStroke 
											color="#CCCCCC" 
											weight="1"/> 
									</s:borderStroke> 
									<s:backgroundFill>
										<!-- 180 rotation creates right to left gradient --> 
										<s:LinearGradient rotation="90">
											<s:GradientEntry color="0xa2a2a2" />
											<s:GradientEntry color="0x353535" />
										</s:LinearGradient>
									</s:backgroundFill> 
									<s:Label id="savingSoFar"  styleName="odometerText" width="170" height="32" trackingRight="4"  />
								</s:BorderContainer>
								<s:Label id="suffixSignSymbol" styleName="suffixSignStyle" height="100%" width="50" />	
							</s:HGroup>
						</s:VGroup>
				</s:HGroup>
				</s:VGroup>	
			
			</components:GroupBox>
			<!--<mx:Spacer width="15%"/>
			<mx:VRule height="100%" />-->
			<components:GroupBox height="100%" width="100%" label="{Constants.CURRENT_SAVING}" skinClass="com.enlightedinc.components.skins.GroupBoxLegendSkin" >
				<s:VGroup verticalAlign="middle" paddingLeft="10" paddingTop="10">
					<s:HGroup verticalAlign="middle" gap="0">
						<s:BorderContainer id="brdr2"
										   width="115" height="60"
										   horizontalCenter="0" verticalCenter="0"
										   styleName="savingPercBorderStyle">
							<s:Label id="savingCurrPerc" styleName="savingPercLabelStyle" text="{percetPrecision(countsCalculator.savingRightNowPercVal)}"  width="115" height="60"/>
							<components:EnergySavingChart id="energySavingGraph" x="83" y="0" maxHeight="57"  />
						</s:BorderContainer>
						<s:VGroup paddingLeft="5">
							<s:HGroup>
								<s:Rect height="10" width="20">
									<s:fill>
										<s:SolidColor color="#3299cc"/>
									</s:fill>
								</s:Rect>
								<s:Label text="Task Tuning" styleName="taskTunegraphBarlabel"  />
							</s:HGroup>
							
							<mx:Spacer width="5"/>
							<s:HGroup>
								<s:Rect height="10" width="20">
									<s:fill>
										<s:SolidColor color="#FFFF52"/>
									</s:fill>
								</s:Rect>
								<s:Label text="Daylight Harvesting" styleName="DHgraphBarlabel" />
							</s:HGroup>
							
							<mx:Spacer width="5"/>
							<s:HGroup>
								<s:Rect height="10" width="20">
									<s:fill>
										<s:SolidColor color="#569814"/>
									</s:fill>
								</s:Rect>
								<s:Label text="Occupancy" styleName="OccgraphBarlabel" />
							</s:HGroup>
						</s:VGroup>
					</s:HGroup>
				</s:VGroup>
				
			</components:GroupBox>
		<!--	<mx:Spacer width="15%"/>
			<mx:VRule height="100%"/>-->
			<components:GroupBox height="100%" width="100%" label="{Constants.LOAD}" skinClass="com.enlightedinc.components.skins.GroupBoxLegendSkin" >
				<s:HGroup width="100%" height="100%" gap="0" >
					<s:VGroup verticalAlign="middle" paddingTop="10" paddingLeft="10" gap="20">
						<s:Label text="{Constants.CURRENT}"  styleName="currentLabels"/>
						<s:Label text="{Constants.PERIOD_PEAK}" styleName="currentLabels" />
						<s:Label text="{Constants.BASE_LINE}" styleName="currentLabels" />
					</s:VGroup>
					<s:VGroup verticalAlign="middle" width="100%" gap="0">
						<s:HGroup gap="0">
						<s:BorderContainer  width="137" height="30"  cornerRadius="5" >
							<s:borderStroke> 
								<mx:SolidColorStroke 
									color="#CCCCCC" 
									weight="1"/> 
							</s:borderStroke> 
							<s:backgroundFill>
								<!-- 180 rotation creates right to left gradient --> 
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="0xa2a2a2"/>
									<s:GradientEntry color="0x353535"/>
								</s:LinearGradient>
							</s:backgroundFill>
							<s:Label id="currentLoad" text="{powerPrecision(countsCalculator.currentLoad,'current')}"  styleName="odometerTextCurrent" width="137" height="30" trackingRight="4"/>
						</s:BorderContainer>
						<s:Label id="currentsuffixSignSymbol1" styleName="suffixSignStyle" height="100%" width="50" />	
						</s:HGroup>
						<s:HGroup gap="0">
						<s:BorderContainer width="137" height="30"  cornerRadius="5" >
							<s:borderStroke> 
								<mx:SolidColorStroke 
									color="#CCCCCC" 
									weight="1"/> 
							</s:borderStroke> 
							<s:backgroundFill>
								<!-- 180 rotation creates right to left gradient --> 
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="0xa2a2a2"/>
									<s:GradientEntry color="0x353535"/>
								</s:LinearGradient>
							</s:backgroundFill>
							<s:Label id="periodPeak" text="{powerPrecision(countsCalculator.periodPeak,'current')}"  styleName="odometerTextCurrent" width="137" height="30" trackingRight="4"/>
						</s:BorderContainer>
						<s:Label id="currentsuffixSignSymbol2" styleName="suffixSignStyle" height="100%" width="50" />
						</s:HGroup>
						<s:HGroup gap="0">
						<s:BorderContainer width="137" height="30"  cornerRadius="5" >
							<s:borderStroke> 
								<mx:SolidColorStroke 
									color="#CCCCCC" 
									weight="1"/> 
							</s:borderStroke> 
							<s:backgroundFill>
								<!-- 180 rotation creates right to left gradient --> 
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="0xa2a2a2"/>
									<s:GradientEntry color="0x353535"/>
								</s:LinearGradient>
							</s:backgroundFill>
							<s:Label id="baselinePower" text="{powerPrecision(countsCalculator.baseLine,'current')}" styleName="odometerTextCurrent" width="137" height="30" trackingRight="4"/>
						</s:BorderContainer>
						<s:Label id="currentsuffixSignSymbol3" styleName="suffixSignStyle" height="100%" width="50" />
						</s:HGroup>
					</s:VGroup>
				</s:HGroup>
			</components:GroupBox>
		</s:HGroup>
	<!--</s:BorderContainer>-->
</s:VGroup> 
