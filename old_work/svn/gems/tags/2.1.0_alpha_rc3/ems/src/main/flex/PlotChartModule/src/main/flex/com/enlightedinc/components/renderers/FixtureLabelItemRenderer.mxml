<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   buttonMode="true"
		   horizontalAlign="center" verticalAlign="middle"
		   doubleClickEnabled="true" doubleClick="showFixtureDetails(event)"
		   name="{Constants.FIXTURE_RENDERER}"
		   creationComplete="onUpdateComplete()">
	
	<fx:Script>
		<![CDATA[
			import com.enlightedinc.assets.images.Images;
			import com.enlightedinc.components.Constants;
			
			import mx.core.FlexGlobals;
			
			private var value:Number;
			
			[Bindable]
			public static var rendererType:String = "";
			
			[Bindable]
			private var showLabel:Boolean = false;
			
			public function onUpdateComplete() : void
			{
				showLabel = false;
				if(rendererType == Constants.FIXTURE_STATUS)
				{
					createStatusIcon();
				}
				else if(rendererType == Constants.LIGHT_LEVEL)
				{
					// value here indicate lightlevel
					value = data.item.lightlevel;
					
					if(value >= 0 && value < 25)
					{
						fixtureImage.source = Images.LightOff;
					}
					else if(value >= 25 && value < 50)
					{
						fixtureImage.source = Images.Light25On;
					}
					else if(value >= 50 && value < 75)
					{
						fixtureImage.source = Images.Light50On;
					}
					else if(value >= 75 && value < 100)
					{
						fixtureImage.source = Images.Light75On;
					}
					else if(value == 100)
					{
						fixtureImage.source = Images.LightFullOn;
					}
				}
				else if(rendererType == Constants.AMBIENT_STATUS)
				{
					// value here indicate ambientlight
					value = data.item.ambientlight;
					
					if(value < 10)
					{
						fixtureImage.source = Images.AmbientDark;
					}
					else if(value >= 10 && value < 30)
					{
						fixtureImage.source = Images.AmbientDim;
					}
					else if(value >= 30 && value < 65)
					{
						fixtureImage.source = Images.AmbientNormal;
					}
					else if(value >= 65)
					{
						fixtureImage.source = Images.AmbientBright;
					}
				}
				else if(rendererType == Constants.OCCUPANCY_STATUS)
				{
					// value here indicate lastoccupancyseen
					value = data.item.lastoccupancyseen;
					
					if(value <= 30)
					{
						fixtureImage.source = Images.OccupancyOccupied;
					}
					else if(value > 30 &&  value< 300)
					{
						fixtureImage.source = Images.OccupancyJustVacated; 
					}
					else
					{
						fixtureImage.source = Images.OccupancyVacated;
					}
				}
				else if(rendererType == Constants.TEMPERATURE_STATUS)
				{
					// value here indicate avgtemperature
					value = data.item.avgtemperature;
					
					if(value > 82)
					{
						fixtureImage.source = Images.TemperatureHot;
					}
					else if(value > 75 && value <= 82)
					{
						fixtureImage.source = Images.TemperatureWarm;
					}
					else if(value > 68 && value <= 75)
					{
						fixtureImage.source = Images.TemperatureNormal;
					}
					else if(value > 65 && value <= 68)
					{
						fixtureImage.source = Images.TemperatureCool;
					}
					else if(value <= 65)
					{
						fixtureImage.source = Images.TemperatureCold;
					}
				}
				else if(rendererType == Constants.BULB_STATUS)
				{
					// value here indicate bulblife
					value = data.item.bulblife;
					
					if (value < 25)
					{
						fixtureImage.source = Images.BulbLowLevel;
					}						
					else if(value < 75 && value >= 25)
					{
						fixtureImage.source = Images.BulbNormalLevel;
					}
					else
					{
						fixtureImage.source = Images.BulbGoodLevel;
					}
				}
				else if(rendererType == Constants.FIXTURE_NAME)
				{
					createStatusIcon();
					showLabel = true;
					fixtureLabel.text = data.item.name;
				}
				else if(rendererType == Constants.FIXTURE_MAC)
				{
					createStatusIcon();
					showLabel = true;
					fixtureLabel.text = data.item.snapaddress;
				}
				else if(rendererType == Constants.FIXTURE_AREA)
				{
					createStatusIcon();
					if(data.item.area)
					{
						fixtureLabel.text = (data.item.area.name);
						showLabel = true;
					}
				}
				else if(rendererType == Constants.FIXTURE_GROUP) // TODO - Group is not returned from service. Waiting on service
				{
					createStatusIcon();
					showLabel = true;
					fixtureLabel.text = data.item.name;
				}
				else if(rendererType == Constants.FIXTURE_PROFILE)
				{
					createStatusIcon();
					showLabel = true;
					fixtureLabel.text = data.item.currentprofile;
				}
			}
			
			private function createStatusIcon() : void
			{
				// value here indicate lastconnectivityat
				var serverDate:Date = createDate(data.item.lastconnectivityat);
				var date:Date = new Date();
				value = ((date.time - serverDate.time)/1000)/60;
				
				if(value <= 10) // less than 10 mins
				{
					fixtureImage.source = Images.ConnectivityGreen ;
				}
				else if(value > 10 && value <= 1440) // between 10 mins and 1 day
				{
					fixtureImage.source = Images.ConnectivityGrey;
				}
				else if(value > 1440 && value <= 10080 ) // between 1 and 7 days
				{
					fixtureImage.source = Images.ConnectivityYellow;
				}
				else if(value > 10080)
				{
					fixtureImage.source = Images.ConnectivityRed;
				}
			}
			
			private function createDate(str:String) : Date
			{
				var date:Date = new Date();
				date.setFullYear(str.slice(0,4));
				date.setMonth(str.slice(5,7));
				date.setMonth(date.getMonth() - 1);
				date.setDate(str.slice(8,10));
				date.setHours(str.slice(11,13));
				date.setMinutes(str.slice(14,16));
				date.setSeconds(str.slice(17,19));
				return date;
			}
			
			private function showFixtureDetails(event:MouseEvent) : void
			{
				if((FlexGlobals.topLevelApplication.m_propertyMode == Constants.FLOORPLAN) && ExternalInterface.available)
				{
					FlexGlobals.topLevelApplication.showAlertMarquee("Please wait. Opening Fixture details", true);
					ExternalInterface.call("showFixtureForm", data.item.id);
				}
			}
			
		]]>
	</fx:Script>
	
	<mx:Image id="fixtureImage" width="16" height="16"/>
	<mx:Box styleName="fixtureLabelRenderer" backgroundColor="0xFFFFFF"
			visible="{showLabel}" includeInLayout="{showLabel}">
		<s:Label id="fixtureLabel"/>
	</mx:Box>
	
</mx:VBox>