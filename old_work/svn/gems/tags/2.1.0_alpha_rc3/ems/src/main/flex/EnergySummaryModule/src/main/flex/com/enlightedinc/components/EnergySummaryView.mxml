<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 xmlns:components="com.enlightedinc.components.*">
	
	<fx:Declarations>
		<s:HTTPService id="energyMeterHttpService"
					   method="GET"
					   resultFormat="e4x"
					   useProxy="false"
					   showBusyCursor="true"   
					   result="onGetEnergyMeterData(event)"
					   fault="energyMeterHttpService_faultHandler(event)"/>
		
		<s:HTTPService id="energyMeterCurrentHttpService"
					   method="GET"
					   resultFormat="e4x"
					   useProxy="false"
					   showBusyCursor="true"   
					   result="onGetEnergyMeterCurrentData(event)"
					   fault="energyMeterCurrentHttpService_faultHandler(event)"/>
		
		<s:HTTPService id="filterEnergyMeterHttpService" 
					   method="GET"
					   resultFormat="e4x"
					   useProxy="false"
					   showBusyCursor="true"   
					   result="onFilterEnergyMeterHttpService(event)"
					   fault="filterEnergyMeterHttpService_faultHandler(event)"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.enlightedinc.common.CountsCalculator;
			import com.enlightedinc.events.CurrentSavingChartUpdate;
			import com.enlightedinc.events.EnergySummaryUnitBarEvent;
			
			import mx.charts.HitData;
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			
			private var fromStr:String = "";
			private var toStr:String = "";
			
			[Bindable]
			private var energyMeterObj: Object = new Object();
			
			[Bindable]
			public var dataPeriod:String;
			
			[Bindable]
			private var application:Object = FlexGlobals.topLevelApplication;
			
			private var countCalculator:CountsCalculator= CountsCalculator.getInstance();
			private function onGetEnergyMeterData(event:ResultEvent) : void
			{
				showHideNoDataLabel(false);
				countCalculator.flushGlobalCollection();
				var xml:XMLDocument = new XMLDocument(event.result.toString());
				if(event.result.toString() == "")
				{
					countCalculator.flushCounts();
					countCalculator.flushGlobalCollection();
					showHideNoDataLabel(true);
					return;
				}
				//var energyUsageData:ArrayCollection = new ArrayCollection();
				var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);				
				var resultObj:Object = decoder.decodeXML(xml);
				(resultObj.dashboardRecords.dashboardRecord is ArrayCollection) ? (countCalculator.energyConsumptionRawDataCollection = resultObj.dashboardRecords.dashboardRecord) : (countCalculator.energyConsumptionRawDataCollection.addItem(resultObj.dashboardRecords.dashboardRecord));
				//countCalculator.calculateKwhCounts(countCalculator.energyConsumptionRawDataCollection);
				dispatchEvent( new EnergySummaryUnitBarEvent(EnergySummaryUnitBarEvent.UNIT_CHANGE, Constants.POWER_UNIT));
			}
			
			private function onGetEnergyMeterCurrentData(event:ResultEvent):void
			{
				var xml:XMLDocument = new XMLDocument(event.result.toString());
				if(event.result.toString() == "")
				{
					CountsCalculator.getInstance().flushCurrentCount();
					return;
				}
				var energyUsageData:ArrayCollection = new ArrayCollection();
				var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);				
				var resultObj:Object = decoder.decodeXML(xml);
				(resultObj.dashboardRecords.dashboardRecord is ArrayCollection) ? (energyUsageData = resultObj.dashboardRecords.dashboardRecord) : (energyUsageData.addItem(resultObj.dashboardRecords.dashboardRecord));
				CountsCalculator.getInstance().calculateCurrentCount(energyUsageData);
			}
			
			private function onFilterEnergyMeterHttpService(event:ResultEvent):void{
				showHideNoDataLabel(false);
				countCalculator.flushGlobalCollection();
				var xml:XMLDocument = new XMLDocument(event.result.toString());
				if(event.result.toString() == "")
				{
					CountsCalculator.getInstance().flushCounts();
					countCalculator.flushGlobalCollection();
					showHideNoDataLabel(true);
					return;
				}
				//var energyUsageData:ArrayCollection = new ArrayCollection();
				var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);				
				var resultObj:Object = decoder.decodeXML(xml);
				(resultObj.dashboardRecords.dashboardRecord is ArrayCollection) ? (countCalculator.energyConsumptionRawDataCollection = resultObj.dashboardRecords.dashboardRecord) : (countCalculator.energyConsumptionRawDataCollection.addItem(resultObj.dashboardRecords.dashboardRecord));
				dispatchEvent( new EnergySummaryUnitBarEvent(EnergySummaryUnitBarEvent.UNIT_CHANGE, Constants.POWER_UNIT));
				//countCalculator.calculateKwhCounts(countCalculator.energyConsumptionRawDataCollection);
				
			}
			private function profileDataTipFunction(item:HitData) : String
			{
				return item.item.profileType + " (Power Used: " + item.item.powerUsage + " W)";
			}
			
			private function wattPrecision(value:Number) : String
			{
				if(value == 0)
					return "0.00 W";
				else if(!value)
					return "-";
				else if (value >= 1000000)
					return (value/1000000).toFixed(2) +" MW";
				else if (value >= 1000)
					return (value/1000).toFixed(2) +" kW";
				else
					return value.toFixed(2) + " W";
			}
			
			private function whPrecision(value:Number) : String
			{
				if(value == 0)
					return "0.00 Wh";
				else if(!value)
					return "-";
				else if (Number(value) >= 1000000)
					return (Number(value)/1000000).toFixed(2) +" MWh";
				else if (Number(value) >= 1000)
					return (Number(value)/1000).toFixed(2) +" kWh";
				else
					return Number(value).toFixed(2) + " Wh";
			}
			
			private function currencyPrecision(value:Number) : String
			{
				if(value == 0)
					return "$ 0.00";
				else if(!value)
					return "-";
				else 
					return "$ " + Number(value).toFixed(2).toString();
			}
			

			protected function energyMeterHttpService_faultHandler(event:FaultEvent):void
			{
				//Reset the Current Saving Chart
				 CountsCalculator.getInstance().flushCounts();
				 showHideNoDataLabel(true);
			}


			protected function energyMeterCurrentHttpService_faultHandler(event:FaultEvent):void
			{
				//Reset the Current Saving Chart
				dispatchEvent(new CurrentSavingChartUpdate(CurrentSavingChartUpdate.CHART_RESET)); 
			}


			protected function filterEnergyMeterHttpService_faultHandler(event:FaultEvent):void
			{
				//Reset the Current Saving Chart
				CountsCalculator.getInstance().flushCounts();
				showHideNoDataLabel(true);
			}
			
			private function showHideNoDataLabel(value:Boolean):void
			{
				if(value)
				{
					noDataLabel.visible = true;
					noDataLabel.includeInLayout =true;
				}else
				{
					noDataLabel.visible = false;
					noDataLabel.includeInLayout =false;
				}
			}

		]]>
	</fx:Script>
	<!-- Energy Usage Graph-->
	<mx:Canvas id="esContainer" width="100%" height="100%" minHeight="230">
		<s:Label id="noDataLabel" fontSize="14"  text="{Constants.NO_DISPLAY_DATA}" visible="false" includeInLayout="false" x="{(esContainer.width/2)}" y="{(esContainer.height/2)}"/>
		<s:VGroup styleName="vboxStyle" width="100%" height="100%">
			<components:EnergyUsageChart id="energyUsageGraph" width="100%" height="100%" />
		</s:VGroup>
	</mx:Canvas>
</s:VGroup>
